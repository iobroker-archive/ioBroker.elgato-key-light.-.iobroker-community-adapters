{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["// hue-sync-box API https://developers.meethue.com/develop/hue-entertainment/hue-hdmi-sync-box-api/#Device%20Discovery\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n// Load your modules here, e.g.:\nimport 'source-map-support/register';\n\n// Global variables here\n\nclass ElgatoKeyLight extends utils.Adapter {\n\tprivate requestTimer: ioBroker.Timeout | null;\n\tprivate subscribedStates: string[];\n\tprivate messageHandler: any[];\n\tprivate messageHandlerTimer: ioBroker.Timeout | null;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'elgato-key-light',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\tthis.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t\tthis.requestTimer = null;\n\t\tthis.messageHandlerTimer = null;\n\t\tthis.subscribedStates = [];\n\t\tthis.messageHandler = [];\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\t\tthis.messageHandler = [];\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState('info.connection', false, true);\n\t}\n\n\t/**\n\t * @description a function for log output\n\t */\n\tprivate writeLog(logText: string, logType: 'silly' | 'info' | 'debug' | 'warn' | 'error'): void {\n\t\tif (logType === 'warn' || logType === 'error') {\n\t\t\tif (this.messageHandler.length > 0) {\n\t\t\t\t// check if the logText is not in the messageHandler\n\t\t\t\tif (!this.messageHandler.find((message) => message.message === logText)) {\n\t\t\t\t\t// push the logText to the messageHandler\n\t\t\t\t\tthis.messageHandler.push({\n\t\t\t\t\t\tseverity: logType,\n\t\t\t\t\t\tclearTimer: false,\n\t\t\t\t\t\tmessage: logText,\n\t\t\t\t\t});\n\t\t\t\t\tif (logType === 'warn') this.log.warn(logText);\n\t\t\t\t\tif (logType === 'error') this.log.error(logText);\n\t\t\t\t\tthis.log.debug(\n\t\t\t\t\t\t`[Adapter v.${this.version} writeLog] messageHandler: ` + JSON.stringify(this.messageHandler),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tif (!this.messageHandler.find((message) => message.message === logText).clearTimer) {\n\t\t\t\t\t\t// set the clearTimer to true\n\t\t\t\t\t\tthis.messageHandler.find((message) => message.message === logText).clearTimer = true;\n\t\t\t\t\t\t// set the clearTimer to false and clear the messageHandler for the logText after 5 min\n\t\t\t\t\t\tthis.messageHandlerTimer = this.setTimeout(() => {\n\t\t\t\t\t\t\tthis.messageHandler.find((message) => message.message === logText).clearTimer = false;\n\t\t\t\t\t\t\tthis.messageHandler = this.messageHandler.filter((message) => message.message !== logText);\n\t\t\t\t\t\t\tthis.log.debug(`[Adapter v.${this.version} writeLog] clear messageHandler for ${logText}`);\n\t\t\t\t\t\t}, 300000);\n\t\t\t\t\t}\n\t\t\t\t\tthis.log.debug(\n\t\t\t\t\t\t`[Adapter v.${this.version} writeLog] messageHandler: ` + JSON.stringify(this.messageHandler),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// push the logText to the messageHandler\n\t\t\t\tthis.messageHandler.push({\n\t\t\t\t\tseverity: logType,\n\t\t\t\t\tclearTimer: false,\n\t\t\t\t\tmessage: logText,\n\t\t\t\t});\n\t\t\t\tif (logType === 'warn') this.log.warn(logText);\n\t\t\t\tif (logType === 'error') this.log.error(logText);\n\t\t\t\tthis.log.debug(\n\t\t\t\t\t`[Adapter v.${this.version} writeLog] messageHandler: ` + JSON.stringify(this.messageHandler),\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (logType === 'silly') this.log.silly(logText);\n\t\t\tif (logType === 'info') this.log.info(logText);\n\t\t\tif (logType === 'debug') this.log.debug(logText);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\tprivate async onMessage(obj: ioBroker.Message): Promise<void> {\n\t\tif (typeof obj === 'object' && obj.message) {\n\t\t\tif (obj.command === 'send') {\n\t\t\t\t// e.g. send email or pushover or whatever\n\t\t\t\tthis.log.info('send command');\n\n\t\t\t\t// Send response in callback if required\n\t\t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n\t\tif (state) {\n\t\t\tif (state.from === 'system.adapter.' + this.namespace) {\n\t\t\t\t// ignore the state change from the adapter itself\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t// The state was changed\n\t\t\t\tthis.log.debug(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate async onUnload(callback: () => void): Promise<void> {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\tif (this.requestTimer) this.clearTimeout(this.requestTimer);\n\t\t\tif (this.messageHandlerTimer) this.clearTimeout(this.messageHandlerTimer);\n\t\t\tthis.setState('info.connection', false, true);\n\t\t\t// for (const devicesKey in this.config.devices) {\n\t\t\t// \tthis.setState(\n\t\t\t// \t\t`box_${await replaceFunktion(this.config.devices[devicesKey].name)}.reachable`,\n\t\t\t// \t\tfalse,\n\t\t\t// \t\ttrue,\n\t\t\t// \t);\n\t\t\t// }\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new ElgatoKeyLight(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new ElgatoKeyLight())();\n}\n"],
  "mappings": "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",
  "names": []
}
