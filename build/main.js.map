{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n// Load your modules here, e.g.:\nimport 'source-map-support/register';\nimport { KeyLight, KeyLightInfo, KeyLightOptions } from './types/KeyLight';\nimport { stateAttrb } from './lib/object_definition';\nimport { LightStrip, LightStripOptions } from './types/LightStrip';\nimport { hexToHsb, hsbToHex, hsbToRgb, rgbToHsb } from './lib/color';\nimport axios from 'axios';\nimport sourceMapSupport from 'source-map-support';\n\nsourceMapSupport.install();\n// Global variables here\n\nclass ElgatoKeyLight extends utils.Adapter {\n\tprivate requestTimer: ioBroker.Timeout | null;\n\tprivate messageHandler: any[];\n\tprivate messageHandlerTimer: ioBroker.Timeout | null;\n\tprivate devices: KeyLight[];\n\tprivate interval: number;\n\tprivate requestObject: KeyLight[];\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: 'elgato-key-light',\n\t\t});\n\t\tthis.on('ready', this.onReady.bind(this));\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\n\t\tthis.on('message', this.onMessage.bind(this));\n\t\tthis.on('unload', this.onUnload.bind(this));\n\t\tthis.requestTimer = null;\n\t\tthis.messageHandlerTimer = null;\n\t\tthis.messageHandler = [];\n\t\tthis.devices = [];\n\t\tthis.interval = 5000;\n\t\tthis.requestObject = [];\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\t\tthis.messageHandler = [];\n\t\tthis.devices = [];\n\t\tthis.requestObject = [];\n\t\t// convert the interval to milliseconds\n\t\tthis.interval = this.config.interval * 1000;\n\t\t// Reset the connection indicator during startup\n\t\tthis.setState('info.connection', false, true);\n\n\t\t// collect all devices from the adapter objects\n\t\tconst devices = await this.getDevicesAsync();\n\t\tif (devices.length !== 0) {\n\t\t\tfor (const devicesKey in devices) {\n\t\t\t\tthis.devices.push(devices[devicesKey].native.device);\n\t\t\t\tawait this.createStates(devices[devicesKey].native.device);\n\t\t\t}\n\t\t\tthis.writeLog(`[Adapter v.${this.version} onReady] all devices: ${this.devices.length}`, 'debug');\n\t\t\t// console.log('devices', this.devices);\n\t\t} else {\n\t\t\tthis.writeLog(`[Adapter v.${this.version} onReady] no devices found`, 'debug');\n\t\t\tawait this.setStateAsync('info.connections', { val: JSON.stringify([]), ack: true });\n\t\t}\n\n\t\t// start the requestData timer\n\t\tthis.writeLog(`[Adapter v.${this.version} onReady] start requestData`, 'debug');\n\t\tawait this.requestData();\n\t\tthis.setState('info.connection', true, true);\n\t}\n\n\tprivate async requestData(): Promise<void> {\n\t\t// Request data from all Key Lights every 5 minutes\n\t\tif (this.requestTimer) this.clearTimeout(this.requestTimer);\n\t\t// query all key lights\n\t\tthis.requestObject = [];\n\t\tfor (const device of this.devices) {\n\t\t\tconst data: KeyLight = {\n\t\t\t\tip: device.ip,\n\t\t\t\tport: device.port,\n\t\t\t};\n\t\t\tthis.writeLog(\n\t\t\t\t`[Adapter v.${this.version} requestData] request data for ${device.info?.serialNumber}`,\n\t\t\t\t'debug',\n\t\t\t);\n\t\t\tawait this.requestKeyLight(data);\n\t\t}\n\n\t\tthis.requestTimer = this.setTimeout(() => {\n\t\t\tthis.writeLog(`[Adapter v.${this.version} requestData] next request in ${this.interval} ms`, 'debug');\n\t\t\tthis.requestData();\n\t\t}, this.interval);\n\t}\n\n\tprivate async writeState(device: KeyLight): Promise<void> {\n\t\tif (!device) return;\n\t\tlet deviceName = '';\n\t\t// write the state of the Key Light\n\t\tif (device.info) {\n\t\t\tthis.writeLog(\n\t\t\t\t`[Adapter v.${this.version} writeState] write all info states for ${device.info.displayName}`,\n\t\t\t\t'debug',\n\t\t\t);\n\t\t\tdeviceName = device.info.serialNumber;\n\t\t\tawait this.setStateAsync(`${deviceName}.info.ip`, { val: device.ip, ack: true });\n\t\t\tawait this.setStateAsync(`${deviceName}.info.port`, { val: device.port, ack: true });\n\t\t\tfor (const [key, value] of Object.entries(device.info)) {\n\t\t\t\tif (key !== 'wifi-info') {\n\t\t\t\t\tif (key === 'features') {\n\t\t\t\t\t\tawait this.setStateAsync(`${deviceName}.info.${key}`, {\n\t\t\t\t\t\t\tval: JSON.stringify(value),\n\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (key === 'displayName') {\n\t\t\t\t\t\t// find the configuration of the device and the index\n\t\t\t\t\t\tconst deviceConfig = this.devices.find(\n\t\t\t\t\t\t\t(element) => element.info?.serialNumber === device.info?.serialNumber,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (deviceConfig) {\n\t\t\t\t\t\t\t// if the name was changed then write the new name into the configuration\n\t\t\t\t\t\t\tif (deviceConfig.info?.displayName !== value) {\n\t\t\t\t\t\t\t\t// find the index of the device\n\t\t\t\t\t\t\t\tconst index = this.devices.findIndex(\n\t\t\t\t\t\t\t\t\t(element) => element.info?.serialNumber === device.info?.serialNumber,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\t\t\t\tthis.devices[index].info!.displayName = value as string;\n\t\t\t\t\t\t\t\t\tthis.writeLog(\n\t\t\t\t\t\t\t\t\t\t`[Adapter v.${this.version} writeState] Change name of ${device.info?.displayName} to ${value}`,\n\t\t\t\t\t\t\t\t\t\t'debug',\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tawait this.setStateAsync(`${deviceName}.info.${key}`, {\n\t\t\t\t\t\t\t\t\t\tval: value,\n\t\t\t\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tawait this.createStates(device);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.writeLog(\n\t\t\t\t\t\t\t\t\t`[Adapter v.${this.version} writeState] Name of ${device.info?.displayName} is ${value}`,\n\t\t\t\t\t\t\t\t\t'debug',\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tawait this.setStateAsync(`${deviceName}.info.${key}`, { val: value, ack: true });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.writeLog(\n\t\t\t\t\t\t\t`[Adapter v.${this.version} writeState] write state ${key} with value ${value}`,\n\t\t\t\t\t\t\t'debug',\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait this.setStateAsync(`${deviceName}.info.${key}`, { val: value, ack: true });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (const [key2, value2] of Object.entries(value)) {\n\t\t\t\t\t\tthis.writeLog(\n\t\t\t\t\t\t\t`[Adapter v.${this.version} writeState] write state ${key2} with value ${value2}`,\n\t\t\t\t\t\t\t'debug',\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait this.setStateAsync(`${deviceName}.info.wifi-info.${key2}`, {\n\t\t\t\t\t\t\tval: value2 as any,\n\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (device.battery) {\n\t\t\tthis.writeLog(`[Adapter v.${this.version} writeState] write battery state`, 'debug');\n\t\t\tfor (const [key, value] of Object.entries(device.battery)) {\n\t\t\t\tif (key === 'powerSource') {\n\t\t\t\t\tawait this.setStateAsync(`${deviceName}.battery.${key}`, {\n\t\t\t\t\t\tval: value === 1 ? 'power supplies' : value === 2 ? 'battery' : 'unknown',\n\t\t\t\t\t\tack: true,\n\t\t\t\t\t});\n\t\t\t\t} else if (key === 'currentBatteryVoltage') {\n\t\t\t\t\tawait this.setStateAsync(`${deviceName}.battery.${key}`, {\n\t\t\t\t\t\tval: value / 1000,\n\t\t\t\t\t\tack: true,\n\t\t\t\t\t});\n\t\t\t\t} else if (key === 'inputChargeVoltage') {\n\t\t\t\t\tawait this.setStateAsync(`${deviceName}.battery.${key}`, {\n\t\t\t\t\t\tval: value / 1000,\n\t\t\t\t\t\tack: true,\n\t\t\t\t\t});\n\t\t\t\t} else if (key === 'inputChargeCurrent') {\n\t\t\t\t\tawait this.setStateAsync(`${deviceName}.battery.${key}`, {\n\t\t\t\t\t\tval: value / 1000,\n\t\t\t\t\t\tack: true,\n\t\t\t\t\t});\n\t\t\t\t} else if (key === 'level') {\n\t\t\t\t\tawait this.setStateAsync(`${deviceName}.battery.${key}`, {\n\t\t\t\t\t\tval: Math.round(value),\n\t\t\t\t\t\tack: true,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tawait this.setStateAsync(`${deviceName}.battery.${key}`, { val: value, ack: true });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (device.settings) {\n\t\t\tthis.writeLog(`[Adapter v.${this.version} writeState] write settings state`, 'debug');\n\t\t\tfor (const [key, value] of Object.entries(device.settings)) {\n\t\t\t\tif (key !== `battery`) {\n\t\t\t\t\tif (key === 'powerOnTemperature') {\n\t\t\t\t\t\t// convert the temperature from mired to Kelvin\n\t\t\t\t\t\tconst temp = Math.round(1000000 / value);\n\t\t\t\t\t\tawait this.setStateAsync(`${deviceName}.settings.${key}`, { val: temp, ack: true });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tawait this.setStateAsync(`${deviceName}.settings.${key}`, { val: value, ack: true });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (device.settings.battery) {\n\t\t\t\t\t\tfor (const [key2, value2] of Object.entries(device.settings.battery)) {\n\t\t\t\t\t\t\tif (key2 !== `energySaving`) {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(`${deviceName}.settings.battery.${key2}`, {\n\t\t\t\t\t\t\t\t\tval: value2 as any,\n\t\t\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfor (const [key3, value3] of Object.entries(device.settings.battery.energySaving)) {\n\t\t\t\t\t\t\t\t\tif (key3 !== `adjustBrightness`) {\n\t\t\t\t\t\t\t\t\t\tawait this.setStateAsync(\n\t\t\t\t\t\t\t\t\t\t\t`${deviceName}.settings.battery.energySaving.${key3}`,\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tval: value3 as any,\n\t\t\t\t\t\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tfor (const [key4, value4] of Object.entries(\n\t\t\t\t\t\t\t\t\t\t\tdevice.settings.battery.energySaving.adjustBrightness,\n\t\t\t\t\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\t\t\t\t\tawait this.setStateAsync(\n\t\t\t\t\t\t\t\t\t\t\t\t`${deviceName}.settings.battery.energySaving.adjustBrightness.${key4}`,\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tval: value4 as any,\n\t\t\t\t\t\t\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (device.light) {\n\t\t\tthis.writeLog(`[Adapter v.${this.version} writeState] write light state`, 'debug');\n\t\t\tfor (const [key, value] of Object.entries(device.light)) {\n\t\t\t\tif (key !== `lights`) {\n\t\t\t\t\tawait this.setStateAsync(`${deviceName}.light.${key}`, { val: value, ack: true });\n\t\t\t\t} else {\n\t\t\t\t\tfor (const [key2, value2] of Object.entries(device.light.lights)) {\n\t\t\t\t\t\tfor (const [key3, value3] of Object.entries(value2)) {\n\t\t\t\t\t\t\tif (key3 === 'brightness') {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(`${deviceName}.light.lights.${key2}.${key3}`, {\n\t\t\t\t\t\t\t\t\tval: value3 as number,\n\t\t\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (key3 === 'saturation') {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(`${deviceName}.light.lights.${key2}.${key3}`, {\n\t\t\t\t\t\t\t\t\tval: value3 as number,\n\t\t\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (key3 === 'on') {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(`${deviceName}.light.lights.${key2}.${key3}`, {\n\t\t\t\t\t\t\t\t\tval: value3 === 1,\n\t\t\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (key3 === 'temperature') {\n\t\t\t\t\t\t\t\t// convert the temperature from mired to Kelvin\n\t\t\t\t\t\t\t\tconst kelvin = Math.round(1000000 / value3);\n\t\t\t\t\t\t\t\tawait this.setStateAsync(`${deviceName}.light.lights.${key2}.${key3}`, {\n\t\t\t\t\t\t\t\t\tval: kelvin,\n\t\t\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (key3 === 'hue') {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(`${deviceName}.light.lights.${key2}.${key3}`, {\n\t\t\t\t\t\t\t\t\tval: value3 as number,\n\t\t\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (device.info?.productName === 'Elgato Light Strip') {\n\t\t\t\t\t\t\t\t\tconst stripDevice = device.light as LightStripOptions;\n\t\t\t\t\t\t\t\t\tlet hue = stripDevice.lights[0].hue;\n\t\t\t\t\t\t\t\t\tlet sat = stripDevice.lights[0].saturation;\n\t\t\t\t\t\t\t\t\tlet bri = stripDevice.lights[0].brightness;\n\n\t\t\t\t\t\t\t\t\tif (!hue) hue = 0;\n\t\t\t\t\t\t\t\t\tif (!sat) sat = 0;\n\t\t\t\t\t\t\t\t\tif (!bri) bri = 0;\n\n\t\t\t\t\t\t\t\t\tconst hex = hsbToHex(hue, sat, bri);\n\t\t\t\t\t\t\t\t\tthis.writeLog(\n\t\t\t\t\t\t\t\t\t\t`[Adapter v.${this.version} writeState] convert hsb hue: ${hue}, sat: ${sat}, bri: ${bri} to hex: ${hex} for device: ${deviceName} and write to state `,\n\t\t\t\t\t\t\t\t\t\t'debug',\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tconst rgb = hsbToRgb(hue, sat, bri);\n\n\t\t\t\t\t\t\t\t\tawait this.setStateAsync(`${deviceName}.light.lights.${key2}.hex`, {\n\t\t\t\t\t\t\t\t\t\tval: hex,\n\t\t\t\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tawait this.setStateAsync(`${deviceName}.light.lights.${key2}.rgb`, {\n\t\t\t\t\t\t\t\t\t\tval: rgb,\n\t\t\t\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async createStates(device: KeyLight): Promise<void> {\n\t\tlet deviceName = '';\n\t\t// check if the info is available in device\n\t\tif (device.info) {\n\t\t\tdeviceName = device.info.serialNumber;\n\t\t\tthis.writeLog(\n\t\t\t\t`[Adapter v.${this.version} createStates] create info states for device: ${deviceName}`,\n\t\t\t\t'debug',\n\t\t\t);\n\t\t\t// create the device\n\t\t\tawait this.extendObjectAsync(deviceName, {\n\t\t\t\ttype: 'device',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: device.info.displayName || device.info.productName,\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tstatusStates: {\n\t\t\t\t\t\tonlineId: `${this.namespace}.${deviceName}.reachable`,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tnative: {\n\t\t\t\t\tip: device.ip,\n\t\t\t\t\tport: device.port,\n\t\t\t\t\tdevice: device,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\t// create the channel for the states\n\t\t\tawait this.extendObjectAsync(`${deviceName}.info`, {\n\t\t\t\ttype: 'channel',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: `${device.info?.displayName} / Info`,\n\t\t\t\t\tdesc: 'Information about the device',\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t});\n\n\t\t\tawait this.extendObjectAsync(`${deviceName}.identify`, {\n\t\t\t\ttype: 'state',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: `${device.info.displayName} / Identify`,\n\t\t\t\t\tdesc: 'Identify the device',\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\trole: 'button',\n\t\t\t\t\tdef: true,\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: true,\n\t\t\t\t},\n\t\t\t\tnative: {\n\t\t\t\t\tip: device.ip,\n\t\t\t\t\tport: device.port,\n\t\t\t\t\tproductName: device.info.productName,\n\t\t\t\t},\n\t\t\t});\n\t\t\tthis.subscribeStates(`${deviceName}.identify`);\n\n\t\t\tawait this.extendObjectAsync(`${deviceName}.reachable`, {\n\t\t\t\ttype: 'state',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: `${device.info?.displayName} / Reachable`,\n\t\t\t\t\tdesc: 'Is the device reachable',\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\trole: 'indicator.reachable',\n\t\t\t\t\tdef: false,\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t});\n\n\t\t\tawait this.extendObjectAsync(`${deviceName}.info.ip`, {\n\t\t\t\ttype: 'state',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: `${device.info?.displayName} / IP Address`,\n\t\t\t\t\tdesc: 'IP of the device',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\trole: 'info.ip',\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t},\n\t\t\t\tnative: {\n\t\t\t\t\tip: device.ip,\n\t\t\t\t\tport: device.port,\n\t\t\t\t\tproductName: device.info.productName,\n\t\t\t\t},\n\t\t\t});\n\t\t\tawait this.extendObjectAsync(`${deviceName}.info.port`, {\n\t\t\t\ttype: 'state',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: `${device.info?.displayName} / Port`,\n\t\t\t\t\tdesc: 'Port of the device',\n\t\t\t\t\ttype: 'number',\n\t\t\t\t\trole: 'info.port',\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t},\n\t\t\t\tnative: {\n\t\t\t\t\tip: device.ip,\n\t\t\t\t\tport: device.port,\n\t\t\t\t\tproductName: device.info.productName,\n\t\t\t\t},\n\t\t\t});\n\t\t\tawait this.extendObjectAsync(`info.connections`, {\n\t\t\t\ttype: 'state',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: 'Connections',\n\t\t\t\t\tdesc: 'Configured connections',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\trole: 'json',\n\t\t\t\t\tread: true,\n\t\t\t\t\twrite: false,\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t});\n\n\t\t\tfor (const [key] of Object.entries(device.info)) {\n\t\t\t\tif (key !== 'wifi-info') {\n\t\t\t\t\tlet common: ioBroker.StateCommon = { name: '', role: '', read: false, write: false };\n\t\t\t\t\tcommon = stateAttrb[key as keyof typeof stateAttrb];\n\n\t\t\t\t\tawait this.extendObjectAsync(`${deviceName}.info.${key}`, {\n\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t...common,\n\t\t\t\t\t\t\tname: `${device.info?.displayName} / ${common.name}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnative: {\n\t\t\t\t\t\t\tip: device.ip,\n\t\t\t\t\t\t\tport: device.port,\n\t\t\t\t\t\t\tproductName: device.info.productName,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\t// check if the state is writable\n\t\t\t\t\tif (common.write) {\n\t\t\t\t\t\tthis.subscribeStates(`${deviceName}.info.${key}`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (const [key2] of Object.entries(device.info['wifi-info'])) {\n\t\t\t\t\t\t// console.log(`${deviceName}.info.wifi-info.${key2}`);\n\t\t\t\t\t\tawait this.extendObjectAsync(`${deviceName}.info.${key}`, {\n\t\t\t\t\t\t\ttype: 'channel',\n\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\tname: `${device.info?.displayName} / wifi-info`,\n\t\t\t\t\t\t\t\tdesc: 'Information about the wifi',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnative: {},\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlet common: ioBroker.StateCommon = { name: '', role: '', read: false, write: false };\n\t\t\t\t\t\tcommon = stateAttrb[key2 as keyof typeof stateAttrb];\n\n\t\t\t\t\t\tawait this.extendObjectAsync(`${deviceName}.info.${key}.${key2}`, {\n\t\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t...common,\n\t\t\t\t\t\t\t\tname: `${device.info?.displayName} / ${common.name}`,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnative: {\n\t\t\t\t\t\t\t\tip: device.ip,\n\t\t\t\t\t\t\t\tport: device.port,\n\t\t\t\t\t\t\t\tproductName: device.info.productName,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t\t//  check if the state is writable\n\t\t\t\t\t\tif (common.write) {\n\t\t\t\t\t\t\tthis.subscribeStates(`${deviceName}.info.${key}.${key2}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// end of info\n\t\t}\n\t\tif (device.battery) {\n\t\t\tthis.writeLog(`[Adapter v.${this.version} createStates] create battery states for ${deviceName}`, 'debug');\n\t\t\tawait this.extendObjectAsync(`${deviceName}.battery`, {\n\t\t\t\ttype: 'channel',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: `${device.info?.displayName} / battery Info`,\n\t\t\t\t\tdesc: 'battery info of the device',\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t});\n\t\t\tfor (const [key] of Object.entries(device.battery)) {\n\t\t\t\tlet common: ioBroker.StateCommon = { name: '', role: '', read: false, write: false };\n\t\t\t\tcommon = stateAttrb[key as keyof typeof stateAttrb];\n\t\t\t\tawait this.extendObjectAsync(`${deviceName}.battery.${key}`, {\n\t\t\t\t\ttype: 'state',\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\t...common,\n\t\t\t\t\t\tname: `${device.info?.displayName} / ${common.name}`,\n\t\t\t\t\t},\n\t\t\t\t\tnative: {\n\t\t\t\t\t\tip: device.ip,\n\t\t\t\t\t\tport: device.port,\n\t\t\t\t\t\tproductName: device.info?.productName,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t// create the states on the key of device.light\n\t\tif (device.light) {\n\t\t\tthis.writeLog(`[Adapter v.${this.version} createStates] create light states for ${deviceName}`, 'debug');\n\t\t\tawait this.extendObjectAsync(`${deviceName}.light`, {\n\t\t\t\ttype: 'channel',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: `${device.info?.displayName} / Light`,\n\t\t\t\t\tdesc: 'Light settings of the device',\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t});\n\n\t\t\tfor (const [key] of Object.entries(device.light)) {\n\t\t\t\tawait this.extendObjectAsync(`${deviceName}.light.${key}`, {\n\t\t\t\t\ttype: 'channel',\n\t\t\t\t\tcommon: {\n\t\t\t\t\t\tname: `${device.info?.displayName} / lights`,\n\t\t\t\t\t\tdesc: 'Information about the lights',\n\t\t\t\t\t},\n\t\t\t\t\tnative: {},\n\t\t\t\t});\n\t\t\t\tif (key !== `lights`) {\n\t\t\t\t\tlet common: ioBroker.StateCommon = {\n\t\t\t\t\t\tname: '',\n\t\t\t\t\t\trole: '',\n\t\t\t\t\t\tread: false,\n\t\t\t\t\t\twrite: false,\n\t\t\t\t\t};\n\t\t\t\t\tcommon = stateAttrb[key as keyof typeof stateAttrb];\n\n\t\t\t\t\tawait this.extendObjectAsync(`${deviceName}.light.${key}`, {\n\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t...common,\n\t\t\t\t\t\t\tname: `${device.info?.displayName} / ${common.name}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnative: {\n\t\t\t\t\t\t\tip: device.ip,\n\t\t\t\t\t\t\tport: device.port,\n\t\t\t\t\t\t\tproductName: device.info?.productName,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\t// check if the state is writable\n\t\t\t\t\tif (common.write) {\n\t\t\t\t\t\tthis.subscribeStates(`${deviceName}.light.${key}`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// create the states on the key of device.light.lights\n\t\t\t\t\tfor (const [key2, value2] of Object.entries(device.light.lights)) {\n\t\t\t\t\t\tawait this.extendObjectAsync(`${deviceName}.light.${key}.${key2}`, {\n\t\t\t\t\t\t\ttype: 'channel',\n\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\tname: `${device.info?.displayName} / lights.${key2}`,\n\t\t\t\t\t\t\t\tdesc: 'Information about the lights',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnative: {},\n\t\t\t\t\t\t});\n\t\t\t\t\t\tfor (const [key3] of Object.entries(value2)) {\n\t\t\t\t\t\t\tlet common: ioBroker.StateCommon = {\n\t\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\t\trole: '',\n\t\t\t\t\t\t\t\tread: false,\n\t\t\t\t\t\t\t\twrite: false,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tkey3 == 'hue' ||\n\t\t\t\t\t\t\t\tkey3 == 'saturation' ||\n\t\t\t\t\t\t\t\tkey3 == 'brightness' ||\n\t\t\t\t\t\t\t\tkey3 == 'temperature' ||\n\t\t\t\t\t\t\t\tkey3 == 'on'\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tcommon = stateAttrb[key3 as keyof typeof stateAttrb];\n\n\t\t\t\t\t\t\t\tawait this.extendObjectAsync(`${deviceName}.light.${key}.${key2}.${key3}`, {\n\t\t\t\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\t\t...common,\n\t\t\t\t\t\t\t\t\t\tname: `${device.info?.displayName} / ${common.name}`,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tnative: {\n\t\t\t\t\t\t\t\t\t\tip: device.ip,\n\t\t\t\t\t\t\t\t\t\tport: device.port,\n\t\t\t\t\t\t\t\t\t\tproductName: device.info?.productName,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// check if the state is writable\n\t\t\t\t\t\t\t\tif (common.write) {\n\t\t\t\t\t\t\t\t\tthis.subscribeStates(`${deviceName}.light.${key}.${key2}.${key3}`);\n\t\t\t\t\t\t\t\t\tthis.subscribeStates(`${deviceName}.light.${key}.${key2}.hue`);\n\t\t\t\t\t\t\t\t\tthis.subscribeStates(`${deviceName}.light.${key}.${key2}.saturation`);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (device.info?.productName === 'Elgato Light Strip') {\n\t\t\t\t\t\t\t\t\tconst hex = stateAttrb.hex;\n\t\t\t\t\t\t\t\t\tawait this.extendObjectAsync(`${deviceName}.light.${key}.${key2}.hex`, {\n\t\t\t\t\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\t\t\t...hex,\n\t\t\t\t\t\t\t\t\t\t\tname: `${device.info?.displayName} / ${hex.name}`,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tnative: {\n\t\t\t\t\t\t\t\t\t\t\tip: device.ip,\n\t\t\t\t\t\t\t\t\t\t\tport: device.port,\n\t\t\t\t\t\t\t\t\t\t\tproductName: device.info?.productName,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tthis.subscribeStates(`${deviceName}.light.${key}.${key2}.hex`);\n\t\t\t\t\t\t\t\t\tconst rgb = stateAttrb.rgb;\n\t\t\t\t\t\t\t\t\tawait this.extendObjectAsync(`${deviceName}.light.${key}.${key2}.rgb`, {\n\t\t\t\t\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\t\t\t...rgb,\n\t\t\t\t\t\t\t\t\t\t\tname: `${device.info?.displayName} / ${rgb.name}`,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tnative: {\n\t\t\t\t\t\t\t\t\t\t\tip: device.ip,\n\t\t\t\t\t\t\t\t\t\t\tport: device.port,\n\t\t\t\t\t\t\t\t\t\t\tproductName: device.info?.productName,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tthis.subscribeStates(`${deviceName}.light.${key}.${key2}.rgb`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// create the states on the key of device.settings\n\t\tif (device.settings) {\n\t\t\tthis.writeLog(`[Adapter v.${this.version} createStates] create settings states for ${deviceName}`, 'debug');\n\t\t\tawait this.extendObjectAsync(`${deviceName}.settings`, {\n\t\t\t\ttype: 'channel',\n\t\t\t\tcommon: {\n\t\t\t\t\tname: `${device.info?.displayName} / Settings`,\n\t\t\t\t\tdesc: 'Settings of the device',\n\t\t\t\t},\n\t\t\t\tnative: {},\n\t\t\t});\n\n\t\t\tfor (const [key] of Object.entries(device.settings)) {\n\t\t\t\tif (key !== `battery`) {\n\t\t\t\t\tlet common: ioBroker.StateCommon = { name: '', role: '', read: false, write: false };\n\t\t\t\t\tcommon = stateAttrb[key as keyof typeof stateAttrb];\n\n\t\t\t\t\tawait this.extendObjectAsync(`${deviceName}.settings.${key}`, {\n\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t...common,\n\t\t\t\t\t\t\tname: `${device.info?.displayName} / ${common.name}`,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnative: {\n\t\t\t\t\t\t\tip: device.ip,\n\t\t\t\t\t\t\tport: device.port,\n\t\t\t\t\t\t\tproductName: device.info?.productName,\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t\t// check if the state is writable\n\t\t\t\t\tif (common.write) {\n\t\t\t\t\t\tthis.subscribeStates(`${deviceName}.settings.${key}`);\n\t\t\t\t\t}\n\t\t\t\t\t// end of settings\n\t\t\t\t} else {\n\t\t\t\t\tif (device.settings.battery) {\n\t\t\t\t\t\t// create the states on the key of device.settings.battery\n\t\t\t\t\t\tfor (const [key2] of Object.entries(device.settings.battery)) {\n\t\t\t\t\t\t\tawait this.extendObjectAsync(`${deviceName}.settings.${key}.${key2}`, {\n\t\t\t\t\t\t\t\ttype: 'channel',\n\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\tname: `${device.info?.displayName} / Energy Saving`,\n\t\t\t\t\t\t\t\t\tdesc: 'Information about the energy saving',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tnative: {},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (key2 !== `energySaving`) {\n\t\t\t\t\t\t\t\tawait this.extendObjectAsync(`${deviceName}.settings.${key}`, {\n\t\t\t\t\t\t\t\t\ttype: 'channel',\n\t\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\t\tname: `${device.info?.displayName} / battery`,\n\t\t\t\t\t\t\t\t\t\tdesc: 'Information about the battery',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tnative: {},\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tlet common: ioBroker.StateCommon = { name: '', role: '', read: false, write: false };\n\t\t\t\t\t\t\t\tcommon = stateAttrb[key2 as keyof typeof stateAttrb];\n\n\t\t\t\t\t\t\t\tawait this.extendObjectAsync(`${deviceName}.settings.${key}.${key2}`, {\n\t\t\t\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\t\t...common,\n\t\t\t\t\t\t\t\t\t\tname: `${device.info?.displayName} / ${common.name}`,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tnative: {\n\t\t\t\t\t\t\t\t\t\tip: device.ip,\n\t\t\t\t\t\t\t\t\t\tport: device.port,\n\t\t\t\t\t\t\t\t\t\tproductName: device.info?.productName,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t// check if the state is writable\n\t\t\t\t\t\t\t\tif (common.write) {\n\t\t\t\t\t\t\t\t\tthis.subscribeStates(`${deviceName}.settings.${key}.${key2}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// end of battery\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// energySaving\n\t\t\t\t\t\t\t\tfor (const [key3] of Object.entries(device.settings.battery.energySaving)) {\n\t\t\t\t\t\t\t\t\tawait this.extendObjectAsync(`${deviceName}.settings.${key}.${key2}.${key3}`, {\n\t\t\t\t\t\t\t\t\t\ttype: 'channel',\n\t\t\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\t\t\tname: `${device.info?.displayName} / adjust Brightness`,\n\t\t\t\t\t\t\t\t\t\t\tdesc: 'Information about the adjustBrightness',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tnative: {},\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tif (key3 !== `adjustBrightness`) {\n\t\t\t\t\t\t\t\t\t\tlet common: ioBroker.StateCommon = {\n\t\t\t\t\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\t\t\t\t\trole: '',\n\t\t\t\t\t\t\t\t\t\t\tread: false,\n\t\t\t\t\t\t\t\t\t\t\twrite: false,\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tcommon = stateAttrb[key3 as keyof typeof stateAttrb];\n\n\t\t\t\t\t\t\t\t\t\tawait this.extendObjectAsync(`${deviceName}.settings.${key}.${key2}.${key3}`, {\n\t\t\t\t\t\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\t\t\t\t...common,\n\t\t\t\t\t\t\t\t\t\t\t\tname: `${device.info?.displayName} / ${common.name}`,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tnative: {\n\t\t\t\t\t\t\t\t\t\t\t\tip: device.ip,\n\t\t\t\t\t\t\t\t\t\t\t\tport: device.port,\n\t\t\t\t\t\t\t\t\t\t\t\tproductName: device.info?.productName,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t// check if the state is writable\n\t\t\t\t\t\t\t\t\t\tif (common.write) {\n\t\t\t\t\t\t\t\t\t\t\tthis.subscribeStates(`${deviceName}.settings.${key}.${key2}.${key3}`);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// adjustBrightness\n\t\t\t\t\t\t\t\t\t\tfor (const [key4] of Object.entries(\n\t\t\t\t\t\t\t\t\t\t\tdevice.settings.battery.energySaving.adjustBrightness,\n\t\t\t\t\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\t\t\t\t\tif (key4 === `brightness`) {\n\t\t\t\t\t\t\t\t\t\t\t\tlet common: ioBroker.StateCommon = {\n\t\t\t\t\t\t\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\trole: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\tread: false,\n\t\t\t\t\t\t\t\t\t\t\t\t\twrite: false,\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\tcommon = stateAttrb['adjustBrightness' as keyof typeof stateAttrb];\n\n\t\t\t\t\t\t\t\t\t\t\t\tawait this.extendObjectAsync(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`${deviceName}.settings.${key}.${key2}.${key3}.${key4}`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...common,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: `${device.info?.displayName} / ${common.name}`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnative: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tip: device.ip,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tport: device.port,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tproductName: device.info?.productName,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tlet common: ioBroker.StateCommon = {\n\t\t\t\t\t\t\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\trole: '',\n\t\t\t\t\t\t\t\t\t\t\t\t\tread: false,\n\t\t\t\t\t\t\t\t\t\t\t\t\twrite: false,\n\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\t\tcommon = stateAttrb[key4 as keyof typeof stateAttrb];\n\n\t\t\t\t\t\t\t\t\t\t\t\tawait this.extendObjectAsync(\n\t\t\t\t\t\t\t\t\t\t\t\t\t`${deviceName}.settings.${key}.${key2}.${key3}.${key4}`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: 'state',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t...common,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: `${device.info?.displayName} / ${common.name}`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tnative: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tip: device.ip,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tport: device.port,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tproductName: device.info?.productName,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t// check if the state is writable\n\t\t\t\t\t\t\t\t\t\t\t\tif (common.write) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.subscribeStates(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`${deviceName}.settings.${key}.${key2}.${key3}.${key4}`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// end of adjustBrightness\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// end of energySaving\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// end of settings\n\t\t\t}\n\t\t}\n\t\t// create the states on the key of device.battery\n\n\t\tawait this.setStateAsync(`${deviceName}.reachable`, true, true);\n\t\tawait this.setStateAsync('info.connections', { val: JSON.stringify(this.devices), ack: true });\n\t}\n\n\tprivate async addKeyLight(device: KeyLight): Promise<{\n\t\terror: boolean;\n\t\tmessage: Error | string;\n\t}> {\n\t\ttry {\n\t\t\tconst keyLight: KeyLight = device;\n\t\t\t//Grab our Key Light's settings, info, and current options\n\t\t\tconst settingsCall = await axios.get(`http://${keyLight.ip}:${keyLight.port}/elgato/lights/settings`);\n\t\t\tkeyLight.settings = settingsCall.data;\n\n\t\t\tconst infoCall = await axios.get(`http://${keyLight.ip}:${keyLight.port}/elgato/accessory-info`);\n\t\t\tkeyLight.info = infoCall.data;\n\n\t\t\tconst optionsCall = await axios.get(`http://${keyLight.ip}:${keyLight.port}/elgato/lights`);\n\t\t\tkeyLight.light = optionsCall.data;\n\n\t\t\tif (keyLight.info?.productName.startsWith('Elgato Key Light Mini')) {\n\t\t\t\tconst batteryCall = await axios.get(`http://${keyLight.ip}:${keyLight.port}/elgato/battery-info`);\n\t\t\t\tkeyLight.battery = batteryCall.data;\n\t\t\t}\n\n\t\t\t// check if the device is already in the list\n\t\t\tif (this.devices.find((element) => element.info?.serialNumber === keyLight.info?.serialNumber)) {\n\t\t\t\tthis.writeLog(\n\t\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} addKeyLight] Device ${keyLight.info?.serialNumber} already in exist`,\n\t\t\t\t\t'debug',\n\t\t\t\t);\n\t\t\t\t// console.log(`Device ${newKeyLight.info?.serialNumber} already in exist`);\n\t\t\t} else {\n\t\t\t\t// if not in the list then create a new device\n\t\t\t\tthis.writeLog(\n\t\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} addKeyLight] Device ${keyLight.info?.serialNumber} not in exist - add it`,\n\t\t\t\t\t'debug',\n\t\t\t\t);\n\t\t\t\tthis.writeLog(\n\t\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} addKeyLight] add new device: ${keyLight.info?.serialNumber} => ${keyLight.info?.displayName}`,\n\t\t\t\t\t'debug',\n\t\t\t\t);\n\t\t\t\tthis.devices.push(keyLight);\n\t\t\t\tawait this.createStates(keyLight);\n\t\t\t}\n\t\t\tthis.writeLog(\n\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} addKeyLight] start createStates for ${keyLight.info?.serialNumber}`,\n\t\t\t\t'debug',\n\t\t\t);\n\n\t\t\tthis.writeLog(\n\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} addKeyLight] start writeState for ${keyLight.info?.serialNumber}`,\n\t\t\t\t'debug',\n\t\t\t);\n\t\t\tawait this.onReady();\n\t\t\treturn {\n\t\t\t\terror: false,\n\t\t\t\tmessage: 'success',\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tthis.writeLog(`[Adapter v.${this.version} Axios: ${axios.VERSION} addKeyLight] ${error}`, 'error');\n\t\t\treturn {\n\t\t\t\terror: true,\n\t\t\t\tmessage: error,\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate async requestKeyLight(device: KeyLight): Promise<void> {\n\t\ttry {\n\t\t\tconst keyLight: KeyLight = device;\n\t\t\t//Grab our Key Light's settings, info, and current options\n\t\t\tconst settingsCall = await axios.get(`http://${keyLight.ip}:${keyLight.port}/elgato/lights/settings`);\n\t\t\tkeyLight.settings = settingsCall.data;\n\n\t\t\tconst infoCall = await axios.get(`http://${keyLight.ip}:${keyLight.port}/elgato/accessory-info`);\n\t\t\tkeyLight.info = infoCall.data;\n\n\t\t\tconst optionsCall = await axios.get(`http://${keyLight.ip}:${keyLight.port}/elgato/lights`);\n\t\t\tkeyLight.light = optionsCall.data;\n\n\t\t\tif (keyLight.info?.productName.startsWith('Elgato Key Light Mini')) {\n\t\t\t\tconst batteryCall = await axios.get(`http://${keyLight.ip}:${keyLight.port}/elgato/battery-info`);\n\t\t\t\tkeyLight.battery = batteryCall.data;\n\t\t\t}\n\n\t\t\tthis.writeLog(\n\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION}] requestKeyLight] start writeState for ${\n\t\t\t\t\tkeyLight.info?.serialNumber\n\t\t\t\t} with Data: ${JSON.stringify(keyLight)}`,\n\t\t\t\t'debug',\n\t\t\t);\n\n\t\t\tawait this.writeState(keyLight);\n\t\t\tthis.requestObject.push(keyLight);\n\t\t} catch (error) {\n\t\t\tif (error.response) {\n\t\t\t\tthis.writeLog(\n\t\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} updateLightOptions] Error send for ${\n\t\t\t\t\t\tdevice.ip\n\t\t\t\t\t} ${error.message} >> message: ${JSON.stringify(error.response.data.errors)}`,\n\t\t\t\t\t'error',\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.writeLog(\n\t\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} updateLightOptions] Error send for ${device.ip} ${error.message}`,\n\t\t\t\t\t'error',\n\t\t\t\t);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @description a function for log output\n\t */\n\tprivate writeLog(logText: string, logType: 'silly' | 'info' | 'debug' | 'warn' | 'error'): void {\n\t\tif (logType === 'warn' || logType === 'error') {\n\t\t\tif (this.messageHandler.length > 0) {\n\t\t\t\t// check if the logText is not in the messageHandler\n\t\t\t\tif (!this.messageHandler.find((message) => message.message === logText)) {\n\t\t\t\t\t// push the logText to the messageHandler\n\t\t\t\t\tthis.messageHandler.push({\n\t\t\t\t\t\tseverity: logType,\n\t\t\t\t\t\tclearTimer: false,\n\t\t\t\t\t\tmessage: logText,\n\t\t\t\t\t});\n\t\t\t\t\tif (logType === 'warn') this.log.warn(logText);\n\t\t\t\t\tif (logType === 'error') this.log.error(logText);\n\t\t\t\t\tthis.log.debug(\n\t\t\t\t\t\t`[Adapter v.${this.version} writeLog] messageHandler: ` + JSON.stringify(this.messageHandler),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tif (!this.messageHandler.find((message) => message.message === logText).clearTimer) {\n\t\t\t\t\t\t// set the clearTimer to true\n\t\t\t\t\t\tthis.messageHandler.find((message) => message.message === logText).clearTimer = true;\n\t\t\t\t\t\t// set the clearTimer to false and clear the messageHandler for the logText after 5 min\n\t\t\t\t\t\tthis.messageHandlerTimer = this.setTimeout(() => {\n\t\t\t\t\t\t\tthis.messageHandler.find((message) => message.message === logText).clearTimer = false;\n\t\t\t\t\t\t\tthis.messageHandler = this.messageHandler.filter((message) => message.message !== logText);\n\t\t\t\t\t\t\tthis.log.debug(`[Adapter v.${this.version} writeLog] clear messageHandler for ${logText}`);\n\t\t\t\t\t\t}, 300000);\n\t\t\t\t\t}\n\t\t\t\t\tthis.log.debug(\n\t\t\t\t\t\t`[Adapter v.${this.version} writeLog] messageHandler: ` + JSON.stringify(this.messageHandler),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// push the logText to the messageHandler\n\t\t\t\tthis.messageHandler.push({\n\t\t\t\t\tseverity: logType,\n\t\t\t\t\tclearTimer: false,\n\t\t\t\t\tmessage: logText,\n\t\t\t\t});\n\t\t\t\tif (logType === 'warn') this.log.warn(logText);\n\t\t\t\tif (logType === 'error') this.log.error(logText);\n\t\t\t\tthis.log.debug(\n\t\t\t\t\t`[Adapter v.${this.version} writeLog] messageHandler: ` + JSON.stringify(this.messageHandler),\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (logType === 'silly') this.log.silly(logText);\n\t\t\tif (logType === 'info') this.log.info(logText);\n\t\t\tif (logType === 'debug') this.log.debug(logText);\n\t\t}\n\t}\n\n\tpublic async updateLightOptions(\n\t\tdevice: KeyLight,\n\t\toptions: KeyLightOptions | LightStripOptions,\n\t): Promise<KeyLightOptions | LightStripOptions | undefined> {\n\t\ttry {\n\t\t\tconst result = await axios.put(`http://${device.ip}:${device.port}/elgato/lights`, options);\n\t\t\tif (result.status === 200) {\n\t\t\t\tconst resultData = result.data as KeyLightOptions;\n\t\t\t\t// console.log(resultData);\n\t\t\t\tthis.writeLog(\n\t\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} updateLightOptions] on for ${\n\t\t\t\t\t\tdevice.ip\n\t\t\t\t\t} set to ${JSON.stringify(options)}`,\n\t\t\t\t\t'debug',\n\t\t\t\t);\n\t\t\t\treturn resultData;\n\t\t\t}\n\t\t\t// console.log(\n\t\t\t// \t`[Axios: ${axios.VERSION} updateLightOptions] on for ${device.ip} set to ${JSON.stringify(options)}`,\n\t\t\t// );\n\t\t\tthis.writeLog(\n\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} updateLightOptions] on for ${\n\t\t\t\t\tdevice.ip\n\t\t\t\t} set to ${JSON.stringify(options)}`,\n\t\t\t\t'debug',\n\t\t\t);\n\t\t\treturn undefined;\n\t\t} catch (error) {\n\t\t\tif (error.response) {\n\t\t\t\tthis.writeLog(\n\t\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} updateLightOptions] Error send for ${\n\t\t\t\t\t\tdevice.ip\n\t\t\t\t\t} ${error.message} >> message: ${JSON.stringify(error.response.data.errors)}`,\n\t\t\t\t\t'error',\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.writeLog(\n\t\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} updateLightOptions] Error send for ${device.ip} ${error.message}`,\n\t\t\t\t\t'error',\n\t\t\t\t);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async identify(device: KeyLight): Promise<void> {\n\t\ttry {\n\t\t\tawait axios.post(`http://${device.ip}:${device.port ? device.port : 9123}/elgato/identify`);\n\t\t\tthis.writeLog(\n\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} onStateChange] identify the device`,\n\t\t\t\t'debug',\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tthis.writeLog(\n\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} onStateChange] identify was not successful: ${error}`,\n\t\t\t\t'error',\n\t\t\t);\n\t\t\tthis.writeLog(`[Adapter v.${this.version} Axios: ${axios.VERSION} onStateChange] ${error}`, 'error');\n\t\t}\n\t}\n\n\tpublic async updateLightInfo(device: KeyLight, options: KeyLightInfo): Promise<KeyLightInfo | undefined> {\n\t\ttry {\n\t\t\tconst result = await axios.put(`http://${device.ip}:${device.port}/elgato/accessory-info`, options);\n\t\t\t// console.log(\n\t\t\t// \t`[Adapter v.${this.version} Axios: ${axios.VERSION} updateLightInfo] displayName for ${device.ip} set to ${options}`,\n\t\t\t// );\n\t\t\tthis.writeLog(\n\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} updateLightInfo] displayName for ${device.ip} set to ${options}`,\n\t\t\t\t'debug',\n\t\t\t);\n\t\t\treturn result.data as KeyLightInfo;\n\t\t} catch (error) {\n\t\t\tif (error.response) {\n\t\t\t\tthis.writeLog(\n\t\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} updateLightInfo] Error send for ${device.ip} ${\n\t\t\t\t\t\terror.message\n\t\t\t\t\t} >> message: ${JSON.stringify(error.response.data.errors)}`,\n\t\t\t\t\t'error',\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis.writeLog(\n\t\t\t\t\t`[Adapter v.${this.version} Axios: ${axios.VERSION} updateLightInfo] Error send for ${device.ip} ${error.message}`,\n\t\t\t\t\t'error',\n\t\t\t\t);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\n\t\tif (state) {\n\t\t\tif (state.from === 'system.adapter.' + this.namespace) {\n\t\t\t\t// ignore the state change from the adapter itself\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tthis.writeLog(\n\t\t\t\t\t`[Adapter v.${this.version} onStateChange] state ${id} changed: ${state.val} (ack = ${state.ack})`,\n\t\t\t\t\t'debug',\n\t\t\t\t);\n\t\t\t\tconst stateName = id.split('.').pop();\n\t\t\t\tconst obj = await this.getForeignObjectAsync(id);\n\n\t\t\t\tif (obj) {\n\t\t\t\t\tconst native = obj.native;\n\t\t\t\t\tif (stateName === 'identify') {\n\t\t\t\t\t\tawait this.identify(native as KeyLight);\n\t\t\t\t\t}\n\t\t\t\t\tif (stateName === 'on') {\n\t\t\t\t\t\tthis.writeLog(\n\t\t\t\t\t\t\t`[Adapter v.${this.version} onStateChange] on for ${native.ip} set to ${state.val}`,\n\t\t\t\t\t\t\t'debug',\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst value = state.val ? 1 : 0;\n\t\t\t\t\t\tconst options = {\n\t\t\t\t\t\t\tlights: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ton: value,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst result = await this.updateLightOptions(native as KeyLight, options as KeyLightOptions);\n\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tconst on = result.lights[0].on;\n\n\t\t\t\t\t\t\tif (on === value) {\n\t\t\t\t\t\t\t\tconst newOn = on === 1;\n\n\t\t\t\t\t\t\t\tawait this.setStateAsync(id, newOn, true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst newOn = on === 1;\n\t\t\t\t\t\t\t\tawait this.setStateAsync(id, newOn, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tawait this.setStateAsync(id, result.lights[0].on === 1, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (stateName === 'displayName') {\n\t\t\t\t\t\tthis.writeLog(\n\t\t\t\t\t\t\t`[Adapter v.${this.version} onStateChange] displayName for ${native.ip} set to ${state.val}`,\n\t\t\t\t\t\t\t'debug',\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst value = state.val;\n\t\t\t\t\t\tconst options = {\n\t\t\t\t\t\t\tdisplayName: value,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst result = await this.updateLightInfo(native as KeyLight, options as KeyLightInfo);\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tconst displayName = result.displayName;\n\t\t\t\t\t\t\tif (displayName === value) {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(id, value, true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(id, displayName, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (stateName === 'brightness') {\n\t\t\t\t\t\tconst value = state.val as number;\n\t\t\t\t\t\tthis.writeLog(\n\t\t\t\t\t\t\t`[Adapter v.${this.version} onStateChange] brightness for ${native.ip} set to ${state.val}`,\n\t\t\t\t\t\t\t'debug',\n\t\t\t\t\t\t);\n\t\t\t\t\t\tlet options = {};\n\t\t\t\t\t\tif (native.productName === 'Elgato Light Strip') {\n\t\t\t\t\t\t\t// search in this.requestObjects for the matching object\n\t\t\t\t\t\t\tconst requestObject = this.requestObject.find((obj) => obj.ip === native.ip) as LightStrip;\n\t\t\t\t\t\t\tif (requestObject) {\n\t\t\t\t\t\t\t\t// check if in requestObject.light.lights[0] the property scene is present\n\t\t\t\t\t\t\t\tif (requestObject.light?.lights[0].scene) {\n\t\t\t\t\t\t\t\t\toptions = {\n\t\t\t\t\t\t\t\t\t\tlights: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tid: requestObject.light.lights[0].id,\n\t\t\t\t\t\t\t\t\t\t\t\tname: requestObject.light.lights[0].name,\n\t\t\t\t\t\t\t\t\t\t\t\tbrightness: value,\n\t\t\t\t\t\t\t\t\t\t\t\tnumberOfSceneElements:\n\t\t\t\t\t\t\t\t\t\t\t\t\trequestObject.light.lights[0].numberOfSceneElements,\n\t\t\t\t\t\t\t\t\t\t\t\tscene: requestObject.light.lights[0].scene,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t// console.log(`scene Mode`);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\toptions = {\n\t\t\t\t\t\t\t\t\t\tlights: [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tbrightness: value,\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t// console.log(`brightness Mode`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toptions = {\n\t\t\t\t\t\t\t\tlights: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tbrightness: value,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst result = await this.updateLightOptions(native as KeyLight, options as KeyLightOptions);\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tconst brightness = result.lights[0].brightness;\n\t\t\t\t\t\t\tif (brightness === value) {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(id, value, true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(id, brightness as number, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (stateName === 'temperature') {\n\t\t\t\t\t\tthis.writeLog(\n\t\t\t\t\t\t\t`[Adapter v.${this.version} onStateChange] temperature for ${native.ip} set to ${state.val}`,\n\t\t\t\t\t\t\t'debug',\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst value = state.val as number;\n\n\t\t\t\t\t\tlet mired = 143;\n\t\t\t\t\t\t// convert the temperature from kelvin to mired\n\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\tmired = 1000000 / value;\n\t\t\t\t\t\t\t// round off to 0 decimal places\n\t\t\t\t\t\t\tmired = Math.round(mired);\n\t\t\t\t\t\t\t// check if the value is within the range\n\t\t\t\t\t\t\tif (mired < 143) mired = 143;\n\t\t\t\t\t\t\tif (mired > 344) mired = 344;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmired = 143;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst options = {\n\t\t\t\t\t\t\tlights: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttemperature: mired,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst result: KeyLightOptions | undefined = await this.updateLightOptions(\n\t\t\t\t\t\t\tnative as KeyLight,\n\t\t\t\t\t\t\toptions as KeyLightOptions,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tconst temperature = result.lights[0].temperature;\n\t\t\t\t\t\t\tif (temperature === mired) {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(id, value, true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (temperature) {\n\t\t\t\t\t\t\t\t\t// convert the temperature from mired to kelvin\n\t\t\t\t\t\t\t\t\tlet newTemperature = 1000000 / temperature;\n\t\t\t\t\t\t\t\t\t// round off to 0 decimal places\n\t\t\t\t\t\t\t\t\tnewTemperature = Math.round(newTemperature);\n\t\t\t\t\t\t\t\t\tawait this.setStateAsync(id, newTemperature as number, true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (stateName === 'hue') {\n\t\t\t\t\t\tthis.writeLog(\n\t\t\t\t\t\t\t`[Adapter v.${this.version} onStateChange] hue for ${native.ip} set to ${state.val}`,\n\t\t\t\t\t\t\t'debug',\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst value = state.val as number;\n\t\t\t\t\t\tconst options = {\n\t\t\t\t\t\t\tlights: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\thue: value,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst result: undefined | LightStripOptions = await this.updateLightOptions(\n\t\t\t\t\t\t\tnative as KeyLight,\n\t\t\t\t\t\t\toptions as LightStripOptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tconst hue = result.lights[0].hue;\n\t\t\t\t\t\t\tif (hue === value) {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(id, value, true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(id, hue as number, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (stateName === 'saturation') {\n\t\t\t\t\t\tthis.writeLog(\n\t\t\t\t\t\t\t`[Adapter v.${this.version} onStateChange] saturation for ${native.ip} set to ${state.val}`,\n\t\t\t\t\t\t\t'debug',\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst value = state.val as number;\n\t\t\t\t\t\tconst options = {\n\t\t\t\t\t\t\tlights: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tsaturation: value,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst result: undefined | LightStripOptions = await this.updateLightOptions(\n\t\t\t\t\t\t\tnative as KeyLight,\n\t\t\t\t\t\t\toptions as LightStripOptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tconst saturation = result.lights[0].saturation;\n\t\t\t\t\t\t\tif (saturation === value) {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(id, value, true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(id, saturation as number, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (stateName === 'hex') {\n\t\t\t\t\t\tthis.writeLog(\n\t\t\t\t\t\t\t`[Adapter v.${this.version} onStateChange] hex for ${native.ip} set to ${state.val}`,\n\t\t\t\t\t\t\t'debug',\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst value = state.val as string;\n\n\t\t\t\t\t\tlet hue = 0;\n\t\t\t\t\t\tlet sat = 0;\n\t\t\t\t\t\tlet bri = 0;\n\n\t\t\t\t\t\tconst hsb = hexToHsb(value);\n\t\t\t\t\t\thue = Math.round(hsb[0]);\n\t\t\t\t\t\tsat = Math.round(hsb[1]);\n\t\t\t\t\t\tbri = Math.round(hsb[2]);\n\n\t\t\t\t\t\tconst options = {\n\t\t\t\t\t\t\tlights: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\thue: hue,\n\t\t\t\t\t\t\t\t\tsaturation: sat,\n\t\t\t\t\t\t\t\t\tbrightness: bri,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst result: undefined | LightStripOptions = await this.updateLightOptions(\n\t\t\t\t\t\t\tnative as KeyLight,\n\t\t\t\t\t\t\toptions as LightStripOptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tconst hex = hsbToHex(\n\t\t\t\t\t\t\t\tresult.lights[0].hue as number,\n\t\t\t\t\t\t\t\tresult.lights[0].saturation as number,\n\t\t\t\t\t\t\t\tresult.lights[0].brightness as number,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (hex === value) {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(id, value, true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(id, hex, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (stateName === 'rgb') {\n\t\t\t\t\t\tthis.writeLog(\n\t\t\t\t\t\t\t`[Adapter v.${this.version} onStateChange] rgb for ${native.ip} set to ${state.val}`,\n\t\t\t\t\t\t\t'debug',\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst value = state.val as string;\n\n\t\t\t\t\t\tlet hue = 0;\n\t\t\t\t\t\tlet sat = 0;\n\t\t\t\t\t\tlet bri = 0;\n\n\t\t\t\t\t\tconst rgb = value.split(',');\n\t\t\t\t\t\tconst hsb = rgbToHsb(parseInt(rgb[0]), parseInt(rgb[1]), parseInt(rgb[2]));\n\t\t\t\t\t\thue = Math.round(hsb[0]);\n\t\t\t\t\t\tsat = Math.round(hsb[1]);\n\t\t\t\t\t\tbri = Math.round(hsb[2]);\n\n\t\t\t\t\t\tconst options = {\n\t\t\t\t\t\t\tlights: [\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\thue: hue,\n\t\t\t\t\t\t\t\t\tsaturation: sat,\n\t\t\t\t\t\t\t\t\tbrightness: bri,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst result: undefined | LightStripOptions = await this.updateLightOptions(\n\t\t\t\t\t\t\tnative as KeyLight,\n\t\t\t\t\t\t\toptions as LightStripOptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tconst rgb = hsbToRgb(\n\t\t\t\t\t\t\t\tresult.lights[0].hue as number,\n\t\t\t\t\t\t\t\tresult.lights[0].saturation as number,\n\t\t\t\t\t\t\t\tresult.lights[0].brightness as number,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (rgb === value) {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(id, value, true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tawait this.setStateAsync(id, rgb, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate async onMessage(obj: ioBroker.Message): Promise<void> {\n\t\tif (typeof obj === 'object' && obj.message) {\n\t\t\tif (obj.command === 'addKeyLight') {\n\t\t\t\tconst device = obj.message as KeyLight;\n\t\t\t\tconst data: KeyLight = {\n\t\t\t\t\tip: device.ip,\n\t\t\t\t\tport: 9123,\n\t\t\t\t};\n\t\t\t\tconst result = await this.addKeyLight(data);\n\n\t\t\t\tif (result.message === 'success') {\n\t\t\t\t\tthis.sendTo(obj.from, obj.command, result, obj.callback);\n\t\t\t\t} else {\n\t\t\t\t\tthis.sendTo(obj.from, obj.command, result, obj.callback);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (obj.command === 'deleteKeyLight') {\n\t\t\t\tconst device = obj.message as { id: string };\n\t\t\t\tconst index = this.devices.findIndex((d) => d.info?.serialNumber === device.id);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tthis.devices.splice(index, 1);\n\t\t\t\t\tthis.writeLog(`[Adapter v.${this.version} onMessage] delete device ${device.id}`, 'debug');\n\t\t\t\t\tawait this.delObjectAsync(`${this.namespace}.${device.id}`, { recursive: true });\n\t\t\t\t\tawait this.onReady();\n\t\t\t\t\tthis.sendTo(obj.from, obj.command, { message: 'success' }, obj.callback);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate async onUnload(callback: () => void): Promise<void> {\n\t\ttry {\n\t\t\tthis.writeLog(`[Adapter v.${this.version} onUnload] Adapter stopped`, 'debug');\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\tif (this.requestTimer) this.clearTimeout(this.requestTimer);\n\t\t\tif (this.messageHandlerTimer) this.clearTimeout(this.messageHandlerTimer);\n\t\t\tthis.setState('info.connection', false, true);\n\t\t\tfor (const devicesKey in this.devices) {\n\t\t\t\tthis.setState(`${this.devices[devicesKey].info?.serialNumber}.reachable`, false, true);\n\t\t\t}\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new ElgatoKeyLight(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new ElgatoKeyLight())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAEA,YAAuB;AAEvB,sBAAO;AAEP,+BAA2B;AAE3B,mBAAuD;AACvD,mBAAkB;AAClB,gCAA6B;AAE7B,0BAAAA,QAAiB,QAAQ;AAGzB,MAAM,uBAAuB,MAAM,QAAQ;AAAA,EAQnC,YAAY,UAAyC,CAAC,GAAG;AAC/D,UAAM;AAAA,MACL,GAAG;AAAA,MACH,MAAM;AAAA,IACP,CAAC;AACD,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,SAAK,GAAG,WAAW,KAAK,UAAU,KAAK,IAAI,CAAC;AAC5C,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAC1C,SAAK,eAAe;AACpB,SAAK,sBAAsB;AAC3B,SAAK,iBAAiB,CAAC;AACvB,SAAK,UAAU,CAAC;AAChB,SAAK,WAAW;AAChB,SAAK,gBAAgB,CAAC;AAAA,EACvB;AAAA,EAKA,MAAc,UAAyB;AAEtC,SAAK,iBAAiB,CAAC;AACvB,SAAK,UAAU,CAAC;AAChB,SAAK,gBAAgB,CAAC;AAEtB,SAAK,WAAW,KAAK,OAAO,WAAW;AAEvC,SAAK,SAAS,mBAAmB,OAAO,IAAI;AAG5C,UAAM,UAAU,MAAM,KAAK,gBAAgB;AAC3C,QAAI,QAAQ,WAAW,GAAG;AACzB,iBAAW,cAAc,SAAS;AACjC,aAAK,QAAQ,KAAK,QAAQ,YAAY,OAAO,MAAM;AACnD,cAAM,KAAK,aAAa,QAAQ,YAAY,OAAO,MAAM;AAAA,MAC1D;AACA,WAAK,SAAS,cAAc,KAAK,iCAAiC,KAAK,QAAQ,UAAU,OAAO;AAAA,IAEjG,OAAO;AACN,WAAK,SAAS,cAAc,KAAK,qCAAqC,OAAO;AAC7E,YAAM,KAAK,cAAc,oBAAoB,EAAE,KAAK,KAAK,UAAU,CAAC,CAAC,GAAG,KAAK,KAAK,CAAC;AAAA,IACpF;AAGA,SAAK,SAAS,cAAc,KAAK,sCAAsC,OAAO;AAC9E,UAAM,KAAK,YAAY;AACvB,SAAK,SAAS,mBAAmB,MAAM,IAAI;AAAA,EAC5C;AAAA,EAEA,MAAc,cAA6B;AAzE5C;AA2EE,QAAI,KAAK;AAAc,WAAK,aAAa,KAAK,YAAY;AAE1D,SAAK,gBAAgB,CAAC;AACtB,eAAW,UAAU,KAAK,SAAS;AAClC,YAAM,OAAiB;AAAA,QACtB,IAAI,OAAO;AAAA,QACX,MAAM,OAAO;AAAA,MACd;AACA,WAAK;AAAA,QACJ,cAAc,KAAK,0CAAyC,YAAO,SAAP,mBAAa;AAAA,QACzE;AAAA,MACD;AACA,YAAM,KAAK,gBAAgB,IAAI;AAAA,IAChC;AAEA,SAAK,eAAe,KAAK,WAAW,MAAM;AACzC,WAAK,SAAS,cAAc,KAAK,wCAAwC,KAAK,eAAe,OAAO;AACpG,WAAK,YAAY;AAAA,IAClB,GAAG,KAAK,QAAQ;AAAA,EACjB;AAAA,EAEA,MAAc,WAAW,QAAiC;AAhG3D;AAiGE,QAAI,CAAC;AAAQ;AACb,QAAI,aAAa;AAEjB,QAAI,OAAO,MAAM;AAChB,WAAK;AAAA,QACJ,cAAc,KAAK,iDAAiD,OAAO,KAAK;AAAA,QAChF;AAAA,MACD;AACA,mBAAa,OAAO,KAAK;AACzB,YAAM,KAAK,cAAc,GAAG,sBAAsB,EAAE,KAAK,OAAO,IAAI,KAAK,KAAK,CAAC;AAC/E,YAAM,KAAK,cAAc,GAAG,wBAAwB,EAAE,KAAK,OAAO,MAAM,KAAK,KAAK,CAAC;AACnF,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,OAAO,IAAI,GAAG;AACvD,YAAI,QAAQ,aAAa;AACxB,cAAI,QAAQ,YAAY;AACvB,kBAAM,KAAK,cAAc,GAAG,mBAAmB,OAAO;AAAA,cACrD,KAAK,KAAK,UAAU,KAAK;AAAA,cACzB,KAAK;AAAA,YACN,CAAC;AAAA,UACF,WAAW,QAAQ,eAAe;AAEjC,kBAAM,eAAe,KAAK,QAAQ;AAAA,cACjC,CAAC,YAAS;AAtHjB,oBAAAC,KAAAC;AAsHoB,yBAAAD,MAAA,QAAQ,SAAR,gBAAAA,IAAc,oBAAiBC,MAAA,OAAO,SAAP,gBAAAA,IAAa;AAAA;AAAA,YAC1D;AAEA,gBAAI,cAAc;AAEjB,oBAAI,kBAAa,SAAb,mBAAmB,iBAAgB,OAAO;AAE7C,sBAAM,QAAQ,KAAK,QAAQ;AAAA,kBAC1B,CAAC,YAAS;AA9HnB,wBAAAD,KAAAC;AA8HsB,6BAAAD,MAAA,QAAQ,SAAR,gBAAAA,IAAc,oBAAiBC,MAAA,OAAO,SAAP,gBAAAA,IAAa;AAAA;AAAA,gBAC1D;AACA,oBAAI,UAAU,IAAI;AACjB,uBAAK,QAAQ,OAAO,KAAM,cAAc;AACxC,uBAAK;AAAA,oBACJ,cAAc,KAAK,uCAAsC,YAAO,SAAP,mBAAa,kBAAkB;AAAA,oBACxF;AAAA,kBACD;AACA,wBAAM,KAAK,cAAc,GAAG,mBAAmB,OAAO;AAAA,oBACrD,KAAK;AAAA,oBACL,KAAK;AAAA,kBACN,CAAC;AACD,wBAAM,KAAK,aAAa,MAAM;AAAA,gBAC/B;AAAA,cACD,OAAO;AACN,qBAAK;AAAA,kBACJ,cAAc,KAAK,gCAA+B,YAAO,SAAP,mBAAa,kBAAkB;AAAA,kBACjF;AAAA,gBACD;AACA,sBAAM,KAAK,cAAc,GAAG,mBAAmB,OAAO,EAAE,KAAK,OAAO,KAAK,KAAK,CAAC;AAAA,cAChF;AAAA,YACD;AAAA,UACD,OAAO;AACN,iBAAK;AAAA,cACJ,cAAc,KAAK,mCAAmC,kBAAkB;AAAA,cACxE;AAAA,YACD;AACA,kBAAM,KAAK,cAAc,GAAG,mBAAmB,OAAO,EAAE,KAAK,OAAO,KAAK,KAAK,CAAC;AAAA,UAChF;AAAA,QACD,OAAO;AACN,qBAAW,CAAC,MAAM,MAAM,KAAK,OAAO,QAAQ,KAAK,GAAG;AACnD,iBAAK;AAAA,cACJ,cAAc,KAAK,mCAAmC,mBAAmB;AAAA,cACzE;AAAA,YACD;AACA,kBAAM,KAAK,cAAc,GAAG,6BAA6B,QAAQ;AAAA,cAChE,KAAK;AAAA,cACL,KAAK;AAAA,YACN,CAAC;AAAA,UACF;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,QAAI,OAAO,SAAS;AACnB,WAAK,SAAS,cAAc,KAAK,2CAA2C,OAAO;AACnF,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,OAAO,OAAO,GAAG;AAC1D,YAAI,QAAQ,eAAe;AAC1B,gBAAM,KAAK,cAAc,GAAG,sBAAsB,OAAO;AAAA,YACxD,KAAK,UAAU,IAAI,mBAAmB,UAAU,IAAI,YAAY;AAAA,YAChE,KAAK;AAAA,UACN,CAAC;AAAA,QACF,WAAW,QAAQ,yBAAyB;AAC3C,gBAAM,KAAK,cAAc,GAAG,sBAAsB,OAAO;AAAA,YACxD,KAAK,QAAQ;AAAA,YACb,KAAK;AAAA,UACN,CAAC;AAAA,QACF,WAAW,QAAQ,sBAAsB;AACxC,gBAAM,KAAK,cAAc,GAAG,sBAAsB,OAAO;AAAA,YACxD,KAAK,QAAQ;AAAA,YACb,KAAK;AAAA,UACN,CAAC;AAAA,QACF,WAAW,QAAQ,sBAAsB;AACxC,gBAAM,KAAK,cAAc,GAAG,sBAAsB,OAAO;AAAA,YACxD,KAAK,QAAQ;AAAA,YACb,KAAK;AAAA,UACN,CAAC;AAAA,QACF,WAAW,QAAQ,SAAS;AAC3B,gBAAM,KAAK,cAAc,GAAG,sBAAsB,OAAO;AAAA,YACxD,KAAK,KAAK,MAAM,KAAK;AAAA,YACrB,KAAK;AAAA,UACN,CAAC;AAAA,QACF,OAAO;AACN,gBAAM,KAAK,cAAc,GAAG,sBAAsB,OAAO,EAAE,KAAK,OAAO,KAAK,KAAK,CAAC;AAAA,QACnF;AAAA,MACD;AAAA,IACD;AACA,QAAI,OAAO,UAAU;AACpB,WAAK,SAAS,cAAc,KAAK,4CAA4C,OAAO;AACpF,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,OAAO,QAAQ,GAAG;AAC3D,YAAI,QAAQ,WAAW;AACtB,cAAI,QAAQ,sBAAsB;AAEjC,kBAAM,OAAO,KAAK,MAAM,MAAU,KAAK;AACvC,kBAAM,KAAK,cAAc,GAAG,uBAAuB,OAAO,EAAE,KAAK,MAAM,KAAK,KAAK,CAAC;AAAA,UACnF,OAAO;AACN,kBAAM,KAAK,cAAc,GAAG,uBAAuB,OAAO,EAAE,KAAK,OAAO,KAAK,KAAK,CAAC;AAAA,UACpF;AAAA,QACD,OAAO;AACN,cAAI,OAAO,SAAS,SAAS;AAC5B,uBAAW,CAAC,MAAM,MAAM,KAAK,OAAO,QAAQ,OAAO,SAAS,OAAO,GAAG;AACrE,kBAAI,SAAS,gBAAgB;AAC5B,sBAAM,KAAK,cAAc,GAAG,+BAA+B,QAAQ;AAAA,kBAClE,KAAK;AAAA,kBACL,KAAK;AAAA,gBACN,CAAC;AAAA,cACF,OAAO;AACN,2BAAW,CAAC,MAAM,MAAM,KAAK,OAAO,QAAQ,OAAO,SAAS,QAAQ,YAAY,GAAG;AAClF,sBAAI,SAAS,oBAAoB;AAChC,0BAAM,KAAK;AAAA,sBACV,GAAG,4CAA4C;AAAA,sBAC/C;AAAA,wBACC,KAAK;AAAA,wBACL,KAAK;AAAA,sBACN;AAAA,oBACD;AAAA,kBACD,OAAO;AACN,+BAAW,CAAC,MAAM,MAAM,KAAK,OAAO;AAAA,sBACnC,OAAO,SAAS,QAAQ,aAAa;AAAA,oBACtC,GAAG;AACF,4BAAM,KAAK;AAAA,wBACV,GAAG,6DAA6D;AAAA,wBAChE;AAAA,0BACC,KAAK;AAAA,0BACL,KAAK;AAAA,wBACN;AAAA,sBACD;AAAA,oBACD;AAAA,kBACD;AAAA,gBACD;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA,QAAI,OAAO,OAAO;AACjB,WAAK,SAAS,cAAc,KAAK,yCAAyC,OAAO;AACjF,iBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,OAAO,KAAK,GAAG;AACxD,YAAI,QAAQ,UAAU;AACrB,gBAAM,KAAK,cAAc,GAAG,oBAAoB,OAAO,EAAE,KAAK,OAAO,KAAK,KAAK,CAAC;AAAA,QACjF,OAAO;AACN,qBAAW,CAAC,MAAM,MAAM,KAAK,OAAO,QAAQ,OAAO,MAAM,MAAM,GAAG;AACjE,uBAAW,CAAC,MAAM,MAAM,KAAK,OAAO,QAAQ,MAAM,GAAG;AACpD,kBAAI,SAAS,cAAc;AAC1B,sBAAM,KAAK,cAAc,GAAG,2BAA2B,QAAQ,QAAQ;AAAA,kBACtE,KAAK;AAAA,kBACL,KAAK;AAAA,gBACN,CAAC;AAAA,cACF;AACA,kBAAI,SAAS,cAAc;AAC1B,sBAAM,KAAK,cAAc,GAAG,2BAA2B,QAAQ,QAAQ;AAAA,kBACtE,KAAK;AAAA,kBACL,KAAK;AAAA,gBACN,CAAC;AAAA,cACF;AACA,kBAAI,SAAS,MAAM;AAClB,sBAAM,KAAK,cAAc,GAAG,2BAA2B,QAAQ,QAAQ;AAAA,kBACtE,KAAK,WAAW;AAAA,kBAChB,KAAK;AAAA,gBACN,CAAC;AAAA,cACF;AACA,kBAAI,SAAS,eAAe;AAE3B,sBAAM,SAAS,KAAK,MAAM,MAAU,MAAM;AAC1C,sBAAM,KAAK,cAAc,GAAG,2BAA2B,QAAQ,QAAQ;AAAA,kBACtE,KAAK;AAAA,kBACL,KAAK;AAAA,gBACN,CAAC;AAAA,cACF;AACA,kBAAI,SAAS,OAAO;AACnB,sBAAM,KAAK,cAAc,GAAG,2BAA2B,QAAQ,QAAQ;AAAA,kBACtE,KAAK;AAAA,kBACL,KAAK;AAAA,gBACN,CAAC;AAED,sBAAI,YAAO,SAAP,mBAAa,iBAAgB,sBAAsB;AACtD,wBAAM,cAAc,OAAO;AAC3B,sBAAI,MAAM,YAAY,OAAO,GAAG;AAChC,sBAAI,MAAM,YAAY,OAAO,GAAG;AAChC,sBAAI,MAAM,YAAY,OAAO,GAAG;AAEhC,sBAAI,CAAC;AAAK,0BAAM;AAChB,sBAAI,CAAC;AAAK,0BAAM;AAChB,sBAAI,CAAC;AAAK,0BAAM;AAEhB,wBAAM,UAAM,uBAAS,KAAK,KAAK,GAAG;AAClC,uBAAK;AAAA,oBACJ,cAAc,KAAK,wCAAwC,aAAa,aAAa,eAAe,mBAAmB;AAAA,oBACvH;AAAA,kBACD;AACA,wBAAM,UAAM,uBAAS,KAAK,KAAK,GAAG;AAElC,wBAAM,KAAK,cAAc,GAAG,2BAA2B,YAAY;AAAA,oBAClE,KAAK;AAAA,oBACL,KAAK;AAAA,kBACN,CAAC;AACD,wBAAM,KAAK,cAAc,GAAG,2BAA2B,YAAY;AAAA,oBAClE,KAAK;AAAA,oBACL,KAAK;AAAA,kBACN,CAAC;AAAA,gBACF;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,aAAa,QAAiC;AArU7D;AAsUE,QAAI,aAAa;AAEjB,QAAI,OAAO,MAAM;AAChB,mBAAa,OAAO,KAAK;AACzB,WAAK;AAAA,QACJ,cAAc,KAAK,wDAAwD;AAAA,QAC3E;AAAA,MACD;AAEA,YAAM,KAAK,kBAAkB,YAAY;AAAA,QACxC,MAAM;AAAA,QACN,QAAQ;AAAA,UACP,MAAM,OAAO,KAAK,eAAe,OAAO,KAAK;AAAA,UAG7C,cAAc;AAAA,YACb,UAAU,GAAG,KAAK,aAAa;AAAA,UAChC;AAAA,QACD;AAAA,QACA,QAAQ;AAAA,UACP,IAAI,OAAO;AAAA,UACX,MAAM,OAAO;AAAA,UACb;AAAA,QACD;AAAA,MACD,CAAC;AAGD,YAAM,KAAK,kBAAkB,GAAG,mBAAmB;AAAA,QAClD,MAAM;AAAA,QACN,QAAQ;AAAA,UACP,MAAM,IAAG,YAAO,SAAP,mBAAa;AAAA,UACtB,MAAM;AAAA,QACP;AAAA,QACA,QAAQ,CAAC;AAAA,MACV,CAAC;AAED,YAAM,KAAK,kBAAkB,GAAG,uBAAuB;AAAA,QACtD,MAAM;AAAA,QACN,QAAQ;AAAA,UACP,MAAM,GAAG,OAAO,KAAK;AAAA,UACrB,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,KAAK;AAAA,UACL,MAAM;AAAA,UACN,OAAO;AAAA,QACR;AAAA,QACA,QAAQ;AAAA,UACP,IAAI,OAAO;AAAA,UACX,MAAM,OAAO;AAAA,UACb,aAAa,OAAO,KAAK;AAAA,QAC1B;AAAA,MACD,CAAC;AACD,WAAK,gBAAgB,GAAG,qBAAqB;AAE7C,YAAM,KAAK,kBAAkB,GAAG,wBAAwB;AAAA,QACvD,MAAM;AAAA,QACN,QAAQ;AAAA,UACP,MAAM,IAAG,YAAO,SAAP,mBAAa;AAAA,UACtB,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,KAAK;AAAA,UACL,MAAM;AAAA,UACN,OAAO;AAAA,QACR;AAAA,QACA,QAAQ,CAAC;AAAA,MACV,CAAC;AAED,YAAM,KAAK,kBAAkB,GAAG,sBAAsB;AAAA,QACrD,MAAM;AAAA,QACN,QAAQ;AAAA,UACP,MAAM,IAAG,YAAO,SAAP,mBAAa;AAAA,UACtB,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,QACR;AAAA,QACA,QAAQ;AAAA,UACP,IAAI,OAAO;AAAA,UACX,MAAM,OAAO;AAAA,UACb,aAAa,OAAO,KAAK;AAAA,QAC1B;AAAA,MACD,CAAC;AACD,YAAM,KAAK,kBAAkB,GAAG,wBAAwB;AAAA,QACvD,MAAM;AAAA,QACN,QAAQ;AAAA,UACP,MAAM,IAAG,YAAO,SAAP,mBAAa;AAAA,UACtB,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,QACR;AAAA,QACA,QAAQ;AAAA,UACP,IAAI,OAAO;AAAA,UACX,MAAM,OAAO;AAAA,UACb,aAAa,OAAO,KAAK;AAAA,QAC1B;AAAA,MACD,CAAC;AACD,YAAM,KAAK,kBAAkB,oBAAoB;AAAA,QAChD,MAAM;AAAA,QACN,QAAQ;AAAA,UACP,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,QACR;AAAA,QACA,QAAQ,CAAC;AAAA,MACV,CAAC;AAED,iBAAW,CAAC,GAAG,KAAK,OAAO,QAAQ,OAAO,IAAI,GAAG;AAChD,YAAI,QAAQ,aAAa;AACxB,cAAI,SAA+B,EAAE,MAAM,IAAI,MAAM,IAAI,MAAM,OAAO,OAAO,MAAM;AACnF,mBAAS,oCAAW;AAEpB,gBAAM,KAAK,kBAAkB,GAAG,mBAAmB,OAAO;AAAA,YACzD,MAAM;AAAA,YACN,QAAQ;AAAA,cACP,GAAG;AAAA,cACH,MAAM,IAAG,YAAO,SAAP,mBAAa,iBAAiB,OAAO;AAAA,YAC/C;AAAA,YACA,QAAQ;AAAA,cACP,IAAI,OAAO;AAAA,cACX,MAAM,OAAO;AAAA,cACb,aAAa,OAAO,KAAK;AAAA,YAC1B;AAAA,UACD,CAAC;AAED,cAAI,OAAO,OAAO;AACjB,iBAAK,gBAAgB,GAAG,mBAAmB,KAAK;AAAA,UACjD;AAAA,QACD,OAAO;AACN,qBAAW,CAAC,IAAI,KAAK,OAAO,QAAQ,OAAO,KAAK,YAAY,GAAG;AAE9D,kBAAM,KAAK,kBAAkB,GAAG,mBAAmB,OAAO;AAAA,cACzD,MAAM;AAAA,cACN,QAAQ;AAAA,gBACP,MAAM,IAAG,YAAO,SAAP,mBAAa;AAAA,gBACtB,MAAM;AAAA,cACP;AAAA,cACA,QAAQ,CAAC;AAAA,YACV,CAAC;AACD,gBAAI,SAA+B,EAAE,MAAM,IAAI,MAAM,IAAI,MAAM,OAAO,OAAO,MAAM;AACnF,qBAAS,oCAAW;AAEpB,kBAAM,KAAK,kBAAkB,GAAG,mBAAmB,OAAO,QAAQ;AAAA,cACjE,MAAM;AAAA,cACN,QAAQ;AAAA,gBACP,GAAG;AAAA,gBACH,MAAM,IAAG,YAAO,SAAP,mBAAa,iBAAiB,OAAO;AAAA,cAC/C;AAAA,cACA,QAAQ;AAAA,gBACP,IAAI,OAAO;AAAA,gBACX,MAAM,OAAO;AAAA,gBACb,aAAa,OAAO,KAAK;AAAA,cAC1B;AAAA,YACD,CAAC;AAED,gBAAI,OAAO,OAAO;AACjB,mBAAK,gBAAgB,GAAG,mBAAmB,OAAO,MAAM;AAAA,YACzD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IAED;AACA,QAAI,OAAO,SAAS;AACnB,WAAK,SAAS,cAAc,KAAK,mDAAmD,cAAc,OAAO;AACzG,YAAM,KAAK,kBAAkB,GAAG,sBAAsB;AAAA,QACrD,MAAM;AAAA,QACN,QAAQ;AAAA,UACP,MAAM,IAAG,YAAO,SAAP,mBAAa;AAAA,UACtB,MAAM;AAAA,QACP;AAAA,QACA,QAAQ,CAAC;AAAA,MACV,CAAC;AACD,iBAAW,CAAC,GAAG,KAAK,OAAO,QAAQ,OAAO,OAAO,GAAG;AACnD,YAAI,SAA+B,EAAE,MAAM,IAAI,MAAM,IAAI,MAAM,OAAO,OAAO,MAAM;AACnF,iBAAS,oCAAW;AACpB,cAAM,KAAK,kBAAkB,GAAG,sBAAsB,OAAO;AAAA,UAC5D,MAAM;AAAA,UACN,QAAQ;AAAA,YACP,GAAG;AAAA,YACH,MAAM,IAAG,YAAO,SAAP,mBAAa,iBAAiB,OAAO;AAAA,UAC/C;AAAA,UACA,QAAQ;AAAA,YACP,IAAI,OAAO;AAAA,YACX,MAAM,OAAO;AAAA,YACb,cAAa,YAAO,SAAP,mBAAa;AAAA,UAC3B;AAAA,QACD,CAAC;AAAA,MACF;AAAA,IACD;AAEA,QAAI,OAAO,OAAO;AACjB,WAAK,SAAS,cAAc,KAAK,iDAAiD,cAAc,OAAO;AACvG,YAAM,KAAK,kBAAkB,GAAG,oBAAoB;AAAA,QACnD,MAAM;AAAA,QACN,QAAQ;AAAA,UACP,MAAM,IAAG,YAAO,SAAP,mBAAa;AAAA,UACtB,MAAM;AAAA,QACP;AAAA,QACA,QAAQ,CAAC;AAAA,MACV,CAAC;AAED,iBAAW,CAAC,GAAG,KAAK,OAAO,QAAQ,OAAO,KAAK,GAAG;AACjD,cAAM,KAAK,kBAAkB,GAAG,oBAAoB,OAAO;AAAA,UAC1D,MAAM;AAAA,UACN,QAAQ;AAAA,YACP,MAAM,IAAG,YAAO,SAAP,mBAAa;AAAA,YACtB,MAAM;AAAA,UACP;AAAA,UACA,QAAQ,CAAC;AAAA,QACV,CAAC;AACD,YAAI,QAAQ,UAAU;AACrB,cAAI,SAA+B;AAAA,YAClC,MAAM;AAAA,YACN,MAAM;AAAA,YACN,MAAM;AAAA,YACN,OAAO;AAAA,UACR;AACA,mBAAS,oCAAW;AAEpB,gBAAM,KAAK,kBAAkB,GAAG,oBAAoB,OAAO;AAAA,YAC1D,MAAM;AAAA,YACN,QAAQ;AAAA,cACP,GAAG;AAAA,cACH,MAAM,IAAG,YAAO,SAAP,mBAAa,iBAAiB,OAAO;AAAA,YAC/C;AAAA,YACA,QAAQ;AAAA,cACP,IAAI,OAAO;AAAA,cACX,MAAM,OAAO;AAAA,cACb,cAAa,YAAO,SAAP,mBAAa;AAAA,YAC3B;AAAA,UACD,CAAC;AAED,cAAI,OAAO,OAAO;AACjB,iBAAK,gBAAgB,GAAG,oBAAoB,KAAK;AAAA,UAClD;AAAA,QACD,OAAO;AAEN,qBAAW,CAAC,MAAM,MAAM,KAAK,OAAO,QAAQ,OAAO,MAAM,MAAM,GAAG;AACjE,kBAAM,KAAK,kBAAkB,GAAG,oBAAoB,OAAO,QAAQ;AAAA,cAClE,MAAM;AAAA,cACN,QAAQ;AAAA,gBACP,MAAM,IAAG,YAAO,SAAP,mBAAa,wBAAwB;AAAA,gBAC9C,MAAM;AAAA,cACP;AAAA,cACA,QAAQ,CAAC;AAAA,YACV,CAAC;AACD,uBAAW,CAAC,IAAI,KAAK,OAAO,QAAQ,MAAM,GAAG;AAC5C,kBAAI,SAA+B;AAAA,gBAClC,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,OAAO;AAAA,cACR;AACA,kBACC,QAAQ,SACR,QAAQ,gBACR,QAAQ,gBACR,QAAQ,iBACR,QAAQ,MACP;AACD,yBAAS,oCAAW;AAEpB,sBAAM,KAAK,kBAAkB,GAAG,oBAAoB,OAAO,QAAQ,QAAQ;AAAA,kBAC1E,MAAM;AAAA,kBACN,QAAQ;AAAA,oBACP,GAAG;AAAA,oBACH,MAAM,IAAG,YAAO,SAAP,mBAAa,iBAAiB,OAAO;AAAA,kBAC/C;AAAA,kBACA,QAAQ;AAAA,oBACP,IAAI,OAAO;AAAA,oBACX,MAAM,OAAO;AAAA,oBACb,cAAa,YAAO,SAAP,mBAAa;AAAA,kBAC3B;AAAA,gBACD,CAAC;AAED,oBAAI,OAAO,OAAO;AACjB,uBAAK,gBAAgB,GAAG,oBAAoB,OAAO,QAAQ,MAAM;AACjE,uBAAK,gBAAgB,GAAG,oBAAoB,OAAO,UAAU;AAC7D,uBAAK,gBAAgB,GAAG,oBAAoB,OAAO,iBAAiB;AAAA,gBACrE;AAEA,sBAAI,YAAO,SAAP,mBAAa,iBAAgB,sBAAsB;AACtD,wBAAM,MAAM,oCAAW;AACvB,wBAAM,KAAK,kBAAkB,GAAG,oBAAoB,OAAO,YAAY;AAAA,oBACtE,MAAM;AAAA,oBACN,QAAQ;AAAA,sBACP,GAAG;AAAA,sBACH,MAAM,IAAG,YAAO,SAAP,mBAAa,iBAAiB,IAAI;AAAA,oBAC5C;AAAA,oBACA,QAAQ;AAAA,sBACP,IAAI,OAAO;AAAA,sBACX,MAAM,OAAO;AAAA,sBACb,cAAa,YAAO,SAAP,mBAAa;AAAA,oBAC3B;AAAA,kBACD,CAAC;AACD,uBAAK,gBAAgB,GAAG,oBAAoB,OAAO,UAAU;AAC7D,wBAAM,MAAM,oCAAW;AACvB,wBAAM,KAAK,kBAAkB,GAAG,oBAAoB,OAAO,YAAY;AAAA,oBACtE,MAAM;AAAA,oBACN,QAAQ;AAAA,sBACP,GAAG;AAAA,sBACH,MAAM,IAAG,YAAO,SAAP,mBAAa,iBAAiB,IAAI;AAAA,oBAC5C;AAAA,oBACA,QAAQ;AAAA,sBACP,IAAI,OAAO;AAAA,sBACX,MAAM,OAAO;AAAA,sBACb,cAAa,YAAO,SAAP,mBAAa;AAAA,oBAC3B;AAAA,kBACD,CAAC;AACD,uBAAK,gBAAgB,GAAG,oBAAoB,OAAO,UAAU;AAAA,gBAC9D;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,QAAI,OAAO,UAAU;AACpB,WAAK,SAAS,cAAc,KAAK,oDAAoD,cAAc,OAAO;AAC1G,YAAM,KAAK,kBAAkB,GAAG,uBAAuB;AAAA,QACtD,MAAM;AAAA,QACN,QAAQ;AAAA,UACP,MAAM,IAAG,YAAO,SAAP,mBAAa;AAAA,UACtB,MAAM;AAAA,QACP;AAAA,QACA,QAAQ,CAAC;AAAA,MACV,CAAC;AAED,iBAAW,CAAC,GAAG,KAAK,OAAO,QAAQ,OAAO,QAAQ,GAAG;AACpD,YAAI,QAAQ,WAAW;AACtB,cAAI,SAA+B,EAAE,MAAM,IAAI,MAAM,IAAI,MAAM,OAAO,OAAO,MAAM;AACnF,mBAAS,oCAAW;AAEpB,gBAAM,KAAK,kBAAkB,GAAG,uBAAuB,OAAO;AAAA,YAC7D,MAAM;AAAA,YACN,QAAQ;AAAA,cACP,GAAG;AAAA,cACH,MAAM,IAAG,YAAO,SAAP,mBAAa,iBAAiB,OAAO;AAAA,YAC/C;AAAA,YACA,QAAQ;AAAA,cACP,IAAI,OAAO;AAAA,cACX,MAAM,OAAO;AAAA,cACb,cAAa,YAAO,SAAP,mBAAa;AAAA,YAC3B;AAAA,UACD,CAAC;AAED,cAAI,OAAO,OAAO;AACjB,iBAAK,gBAAgB,GAAG,uBAAuB,KAAK;AAAA,UACrD;AAAA,QAED,OAAO;AACN,cAAI,OAAO,SAAS,SAAS;AAE5B,uBAAW,CAAC,IAAI,KAAK,OAAO,QAAQ,OAAO,SAAS,OAAO,GAAG;AAC7D,oBAAM,KAAK,kBAAkB,GAAG,uBAAuB,OAAO,QAAQ;AAAA,gBACrE,MAAM;AAAA,gBACN,QAAQ;AAAA,kBACP,MAAM,IAAG,YAAO,SAAP,mBAAa;AAAA,kBACtB,MAAM;AAAA,gBACP;AAAA,gBACA,QAAQ,CAAC;AAAA,cACV,CAAC;AACD,kBAAI,SAAS,gBAAgB;AAC5B,sBAAM,KAAK,kBAAkB,GAAG,uBAAuB,OAAO;AAAA,kBAC7D,MAAM;AAAA,kBACN,QAAQ;AAAA,oBACP,MAAM,IAAG,YAAO,SAAP,mBAAa;AAAA,oBACtB,MAAM;AAAA,kBACP;AAAA,kBACA,QAAQ,CAAC;AAAA,gBACV,CAAC;AACD,oBAAI,SAA+B,EAAE,MAAM,IAAI,MAAM,IAAI,MAAM,OAAO,OAAO,MAAM;AACnF,yBAAS,oCAAW;AAEpB,sBAAM,KAAK,kBAAkB,GAAG,uBAAuB,OAAO,QAAQ;AAAA,kBACrE,MAAM;AAAA,kBACN,QAAQ;AAAA,oBACP,GAAG;AAAA,oBACH,MAAM,IAAG,YAAO,SAAP,mBAAa,iBAAiB,OAAO;AAAA,kBAC/C;AAAA,kBACA,QAAQ;AAAA,oBACP,IAAI,OAAO;AAAA,oBACX,MAAM,OAAO;AAAA,oBACb,cAAa,YAAO,SAAP,mBAAa;AAAA,kBAC3B;AAAA,gBACD,CAAC;AAED,oBAAI,OAAO,OAAO;AACjB,uBAAK,gBAAgB,GAAG,uBAAuB,OAAO,MAAM;AAAA,gBAC7D;AAAA,cAED,OAAO;AAEN,2BAAW,CAAC,IAAI,KAAK,OAAO,QAAQ,OAAO,SAAS,QAAQ,YAAY,GAAG;AAC1E,wBAAM,KAAK,kBAAkB,GAAG,uBAAuB,OAAO,QAAQ,QAAQ;AAAA,oBAC7E,MAAM;AAAA,oBACN,QAAQ;AAAA,sBACP,MAAM,IAAG,YAAO,SAAP,mBAAa;AAAA,sBACtB,MAAM;AAAA,oBACP;AAAA,oBACA,QAAQ,CAAC;AAAA,kBACV,CAAC;AACD,sBAAI,SAAS,oBAAoB;AAChC,wBAAI,SAA+B;AAAA,sBAClC,MAAM;AAAA,sBACN,MAAM;AAAA,sBACN,MAAM;AAAA,sBACN,OAAO;AAAA,oBACR;AACA,6BAAS,oCAAW;AAEpB,0BAAM,KAAK,kBAAkB,GAAG,uBAAuB,OAAO,QAAQ,QAAQ;AAAA,sBAC7E,MAAM;AAAA,sBACN,QAAQ;AAAA,wBACP,GAAG;AAAA,wBACH,MAAM,IAAG,YAAO,SAAP,mBAAa,iBAAiB,OAAO;AAAA,sBAC/C;AAAA,sBACA,QAAQ;AAAA,wBACP,IAAI,OAAO;AAAA,wBACX,MAAM,OAAO;AAAA,wBACb,cAAa,YAAO,SAAP,mBAAa;AAAA,sBAC3B;AAAA,oBACD,CAAC;AAED,wBAAI,OAAO,OAAO;AACjB,2BAAK,gBAAgB,GAAG,uBAAuB,OAAO,QAAQ,MAAM;AAAA,oBACrE;AAAA,kBACD,OAAO;AAEN,+BAAW,CAAC,IAAI,KAAK,OAAO;AAAA,sBAC3B,OAAO,SAAS,QAAQ,aAAa;AAAA,oBACtC,GAAG;AACF,0BAAI,SAAS,cAAc;AAC1B,4BAAI,SAA+B;AAAA,0BAClC,MAAM;AAAA,0BACN,MAAM;AAAA,0BACN,MAAM;AAAA,0BACN,OAAO;AAAA,wBACR;AACA,iCAAS,oCAAW;AAEpB,8BAAM,KAAK;AAAA,0BACV,GAAG,uBAAuB,OAAO,QAAQ,QAAQ;AAAA,0BACjD;AAAA,4BACC,MAAM;AAAA,4BACN,QAAQ;AAAA,8BACP,GAAG;AAAA,8BACH,MAAM,IAAG,YAAO,SAAP,mBAAa,iBAAiB,OAAO;AAAA,4BAC/C;AAAA,4BACA,QAAQ;AAAA,8BACP,IAAI,OAAO;AAAA,8BACX,MAAM,OAAO;AAAA,8BACb,cAAa,YAAO,SAAP,mBAAa;AAAA,4BAC3B;AAAA,0BACD;AAAA,wBACD;AAAA,sBACD,OAAO;AACN,4BAAI,SAA+B;AAAA,0BAClC,MAAM;AAAA,0BACN,MAAM;AAAA,0BACN,MAAM;AAAA,0BACN,OAAO;AAAA,wBACR;AACA,iCAAS,oCAAW;AAEpB,8BAAM,KAAK;AAAA,0BACV,GAAG,uBAAuB,OAAO,QAAQ,QAAQ;AAAA,0BACjD;AAAA,4BACC,MAAM;AAAA,4BACN,QAAQ;AAAA,8BACP,GAAG;AAAA,8BACH,MAAM,IAAG,YAAO,SAAP,mBAAa,iBAAiB,OAAO;AAAA,4BAC/C;AAAA,4BACA,QAAQ;AAAA,8BACP,IAAI,OAAO;AAAA,8BACX,MAAM,OAAO;AAAA,8BACb,cAAa,YAAO,SAAP,mBAAa;AAAA,4BAC3B;AAAA,0BACD;AAAA,wBACD;AAEA,4BAAI,OAAO,OAAO;AACjB,+BAAK;AAAA,4BACJ,GAAG,uBAAuB,OAAO,QAAQ,QAAQ;AAAA,0BAClD;AAAA,wBACD;AAAA,sBACD;AAAA,oBAED;AAAA,kBACD;AAAA,gBAED;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MAED;AAAA,IACD;AAGA,UAAM,KAAK,cAAc,GAAG,wBAAwB,MAAM,IAAI;AAC9D,UAAM,KAAK,cAAc,oBAAoB,EAAE,KAAK,KAAK,UAAU,KAAK,OAAO,GAAG,KAAK,KAAK,CAAC;AAAA,EAC9F;AAAA,EAEA,MAAc,YAAY,QAGvB;AA30BJ;AA40BE,QAAI;AACH,YAAM,WAAqB;AAE3B,YAAM,eAAe,MAAM,aAAAC,QAAM,IAAI,UAAU,SAAS,MAAM,SAAS,6BAA6B;AACpG,eAAS,WAAW,aAAa;AAEjC,YAAM,WAAW,MAAM,aAAAA,QAAM,IAAI,UAAU,SAAS,MAAM,SAAS,4BAA4B;AAC/F,eAAS,OAAO,SAAS;AAEzB,YAAM,cAAc,MAAM,aAAAA,QAAM,IAAI,UAAU,SAAS,MAAM,SAAS,oBAAoB;AAC1F,eAAS,QAAQ,YAAY;AAE7B,WAAI,cAAS,SAAT,mBAAe,YAAY,WAAW,0BAA0B;AACnE,cAAM,cAAc,MAAM,aAAAA,QAAM,IAAI,UAAU,SAAS,MAAM,SAAS,0BAA0B;AAChG,iBAAS,UAAU,YAAY;AAAA,MAChC;AAGA,UAAI,KAAK,QAAQ,KAAK,CAAC,YAAS;AA91BnC,YAAAF,KAAAC;AA81BsC,iBAAAD,MAAA,QAAQ,SAAR,gBAAAA,IAAc,oBAAiBC,MAAA,SAAS,SAAT,gBAAAA,IAAe;AAAA,OAAY,GAAG;AAC/F,aAAK;AAAA,UACJ,cAAc,KAAK,kBAAkB,aAAAC,QAAM,gCAA+B,cAAS,SAAT,mBAAe;AAAA,UACzF;AAAA,QACD;AAAA,MAED,OAAO;AAEN,aAAK;AAAA,UACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM,gCAA+B,cAAS,SAAT,mBAAe;AAAA,UACzF;AAAA,QACD;AACA,aAAK;AAAA,UACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM,yCAAwC,cAAS,SAAT,mBAAe,oBAAmB,cAAS,SAAT,mBAAe;AAAA,UACpI;AAAA,QACD;AACA,aAAK,QAAQ,KAAK,QAAQ;AAC1B,cAAM,KAAK,aAAa,QAAQ;AAAA,MACjC;AACA,WAAK;AAAA,QACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM,gDAA+C,cAAS,SAAT,mBAAe;AAAA,QACzG;AAAA,MACD;AAEA,WAAK;AAAA,QACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM,8CAA6C,cAAS,SAAT,mBAAe;AAAA,QACvG;AAAA,MACD;AACA,YAAM,KAAK,QAAQ;AACnB,aAAO;AAAA,QACN,OAAO;AAAA,QACP,SAAS;AAAA,MACV;AAAA,IACD,SAAS,OAAP;AACD,WAAK,SAAS,cAAc,KAAK,kBAAkB,aAAAA,QAAM,wBAAwB,SAAS,OAAO;AACjG,aAAO;AAAA,QACN,OAAO;AAAA,QACP,SAAS;AAAA,MACV;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,gBAAgB,QAAiC;AAx4BhE;AAy4BE,QAAI;AACH,YAAM,WAAqB;AAE3B,YAAM,eAAe,MAAM,aAAAA,QAAM,IAAI,UAAU,SAAS,MAAM,SAAS,6BAA6B;AACpG,eAAS,WAAW,aAAa;AAEjC,YAAM,WAAW,MAAM,aAAAA,QAAM,IAAI,UAAU,SAAS,MAAM,SAAS,4BAA4B;AAC/F,eAAS,OAAO,SAAS;AAEzB,YAAM,cAAc,MAAM,aAAAA,QAAM,IAAI,UAAU,SAAS,MAAM,SAAS,oBAAoB;AAC1F,eAAS,QAAQ,YAAY;AAE7B,WAAI,cAAS,SAAT,mBAAe,YAAY,WAAW,0BAA0B;AACnE,cAAM,cAAc,MAAM,aAAAA,QAAM,IAAI,UAAU,SAAS,MAAM,SAAS,0BAA0B;AAChG,iBAAS,UAAU,YAAY;AAAA,MAChC;AAEA,WAAK;AAAA,QACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM,mDAC1C,cAAS,SAAT,mBAAe,2BACD,KAAK,UAAU,QAAQ;AAAA,QACtC;AAAA,MACD;AAEA,YAAM,KAAK,WAAW,QAAQ;AAC9B,WAAK,cAAc,KAAK,QAAQ;AAAA,IACjC,SAAS,OAAP;AACD,UAAI,MAAM,UAAU;AACnB,aAAK;AAAA,UACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM,8CAC1C,OAAO,MACJ,MAAM,uBAAuB,KAAK,UAAU,MAAM,SAAS,KAAK,MAAM;AAAA,UAC1E;AAAA,QACD;AAAA,MACD,OAAO;AACN,aAAK;AAAA,UACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM,8CAA8C,OAAO,MAAM,MAAM;AAAA,UAC5G;AAAA,QACD;AACA,eAAO;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAAA,EAKQ,SAAS,SAAiB,SAA8D;AAC/F,QAAI,YAAY,UAAU,YAAY,SAAS;AAC9C,UAAI,KAAK,eAAe,SAAS,GAAG;AAEnC,YAAI,CAAC,KAAK,eAAe,KAAK,CAAC,YAAY,QAAQ,YAAY,OAAO,GAAG;AAExE,eAAK,eAAe,KAAK;AAAA,YACxB,UAAU;AAAA,YACV,YAAY;AAAA,YACZ,SAAS;AAAA,UACV,CAAC;AACD,cAAI,YAAY;AAAQ,iBAAK,IAAI,KAAK,OAAO;AAC7C,cAAI,YAAY;AAAS,iBAAK,IAAI,MAAM,OAAO;AAC/C,eAAK,IAAI;AAAA,YACR,cAAc,KAAK,uCAAuC,KAAK,UAAU,KAAK,cAAc;AAAA,UAC7F;AAAA,QACD,OAAO;AACN,cAAI,CAAC,KAAK,eAAe,KAAK,CAAC,YAAY,QAAQ,YAAY,OAAO,EAAE,YAAY;AAEnF,iBAAK,eAAe,KAAK,CAAC,YAAY,QAAQ,YAAY,OAAO,EAAE,aAAa;AAEhF,iBAAK,sBAAsB,KAAK,WAAW,MAAM;AAChD,mBAAK,eAAe,KAAK,CAAC,YAAY,QAAQ,YAAY,OAAO,EAAE,aAAa;AAChF,mBAAK,iBAAiB,KAAK,eAAe,OAAO,CAAC,YAAY,QAAQ,YAAY,OAAO;AACzF,mBAAK,IAAI,MAAM,cAAc,KAAK,8CAA8C,SAAS;AAAA,YAC1F,GAAG,GAAM;AAAA,UACV;AACA,eAAK,IAAI;AAAA,YACR,cAAc,KAAK,uCAAuC,KAAK,UAAU,KAAK,cAAc;AAAA,UAC7F;AAAA,QACD;AAAA,MACD,OAAO;AAEN,aAAK,eAAe,KAAK;AAAA,UACxB,UAAU;AAAA,UACV,YAAY;AAAA,UACZ,SAAS;AAAA,QACV,CAAC;AACD,YAAI,YAAY;AAAQ,eAAK,IAAI,KAAK,OAAO;AAC7C,YAAI,YAAY;AAAS,eAAK,IAAI,MAAM,OAAO;AAC/C,aAAK,IAAI;AAAA,UACR,cAAc,KAAK,uCAAuC,KAAK,UAAU,KAAK,cAAc;AAAA,QAC7F;AAAA,MACD;AAAA,IACD,OAAO;AACN,UAAI,YAAY;AAAS,aAAK,IAAI,MAAM,OAAO;AAC/C,UAAI,YAAY;AAAQ,aAAK,IAAI,KAAK,OAAO;AAC7C,UAAI,YAAY;AAAS,aAAK,IAAI,MAAM,OAAO;AAAA,IAChD;AAAA,EACD;AAAA,EAEA,MAAa,mBACZ,QACA,SAC2D;AAC3D,QAAI;AACH,YAAM,SAAS,MAAM,aAAAA,QAAM,IAAI,UAAU,OAAO,MAAM,OAAO,sBAAsB,OAAO;AAC1F,UAAI,OAAO,WAAW,KAAK;AAC1B,cAAM,aAAa,OAAO;AAE1B,aAAK;AAAA,UACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM,sCAC1C,OAAO,aACG,KAAK,UAAU,OAAO;AAAA,UACjC;AAAA,QACD;AACA,eAAO;AAAA,MACR;AAIA,WAAK;AAAA,QACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM,sCAC1C,OAAO,aACG,KAAK,UAAU,OAAO;AAAA,QACjC;AAAA,MACD;AACA,aAAO;AAAA,IACR,SAAS,OAAP;AACD,UAAI,MAAM,UAAU;AACnB,aAAK;AAAA,UACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM,8CAC1C,OAAO,MACJ,MAAM,uBAAuB,KAAK,UAAU,MAAM,SAAS,KAAK,MAAM;AAAA,UAC1E;AAAA,QACD;AAAA,MACD,OAAO;AACN,aAAK;AAAA,UACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM,8CAA8C,OAAO,MAAM,MAAM;AAAA,UAC5G;AAAA,QACD;AACA,eAAO;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAa,SAAS,QAAiC;AACtD,QAAI;AACH,YAAM,aAAAA,QAAM,KAAK,UAAU,OAAO,MAAM,OAAO,OAAO,OAAO,OAAO,sBAAsB;AAC1F,WAAK;AAAA,QACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM;AAAA,QAC3C;AAAA,MACD;AAAA,IACD,SAAS,OAAP;AACD,WAAK;AAAA,QACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM,uDAAuD;AAAA,QAClG;AAAA,MACD;AACA,WAAK,SAAS,cAAc,KAAK,kBAAkB,aAAAA,QAAM,0BAA0B,SAAS,OAAO;AAAA,IACpG;AAAA,EACD;AAAA,EAEA,MAAa,gBAAgB,QAAkB,SAA0D;AACxG,QAAI;AACH,YAAM,SAAS,MAAM,aAAAA,QAAM,IAAI,UAAU,OAAO,MAAM,OAAO,8BAA8B,OAAO;AAIlG,WAAK;AAAA,QACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM,4CAA4C,OAAO,aAAa;AAAA,QAC3G;AAAA,MACD;AACA,aAAO,OAAO;AAAA,IACf,SAAS,OAAP;AACD,UAAI,MAAM,UAAU;AACnB,aAAK;AAAA,UACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM,2CAA2C,OAAO,MAC5F,MAAM,uBACS,KAAK,UAAU,MAAM,SAAS,KAAK,MAAM;AAAA,UACzD;AAAA,QACD;AAAA,MACD,OAAO;AACN,aAAK;AAAA,UACJ,cAAc,KAAK,kBAAkB,aAAAA,QAAM,2CAA2C,OAAO,MAAM,MAAM;AAAA,UACzG;AAAA,QACD;AACA,eAAO;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAAA,EAKA,MAAc,cAAc,IAAY,OAAyD;AAxkClG;AAykCE,QAAI,OAAO;AACV,UAAI,MAAM,SAAS,oBAAoB,KAAK,WAAW;AAEtD;AAAA,MACD,OAAO;AACN,aAAK;AAAA,UACJ,cAAc,KAAK,gCAAgC,eAAe,MAAM,cAAc,MAAM;AAAA,UAC5F;AAAA,QACD;AACA,cAAM,YAAY,GAAG,MAAM,GAAG,EAAE,IAAI;AACpC,cAAM,MAAM,MAAM,KAAK,sBAAsB,EAAE;AAE/C,YAAI,KAAK;AACR,gBAAM,SAAS,IAAI;AACnB,cAAI,cAAc,YAAY;AAC7B,kBAAM,KAAK,SAAS,MAAkB;AAAA,UACvC;AACA,cAAI,cAAc,MAAM;AACvB,iBAAK;AAAA,cACJ,cAAc,KAAK,iCAAiC,OAAO,aAAa,MAAM;AAAA,cAC9E;AAAA,YACD;AACA,kBAAM,QAAQ,MAAM,MAAM,IAAI;AAC9B,kBAAM,UAAU;AAAA,cACf,QAAQ;AAAA,gBACP;AAAA,kBACC,IAAI;AAAA,gBACL;AAAA,cACD;AAAA,YACD;AACA,kBAAM,SAAS,MAAM,KAAK,mBAAmB,QAAoB,OAA0B;AAE3F,gBAAI,QAAQ;AACX,oBAAM,KAAK,OAAO,OAAO,GAAG;AAE5B,kBAAI,OAAO,OAAO;AACjB,sBAAM,QAAQ,OAAO;AAErB,sBAAM,KAAK,cAAc,IAAI,OAAO,IAAI;AAAA,cACzC,OAAO;AACN,sBAAM,QAAQ,OAAO;AACrB,sBAAM,KAAK,cAAc,IAAI,OAAO,IAAI;AAAA,cACzC;AACA,oBAAM,KAAK,cAAc,IAAI,OAAO,OAAO,GAAG,OAAO,GAAG,IAAI;AAAA,YAC7D;AAAA,UACD;AACA,cAAI,cAAc,eAAe;AAChC,iBAAK;AAAA,cACJ,cAAc,KAAK,0CAA0C,OAAO,aAAa,MAAM;AAAA,cACvF;AAAA,YACD;AACA,kBAAM,QAAQ,MAAM;AACpB,kBAAM,UAAU;AAAA,cACf,aAAa;AAAA,YACd;AACA,kBAAM,SAAS,MAAM,KAAK,gBAAgB,QAAoB,OAAuB;AACrF,gBAAI,QAAQ;AACX,oBAAM,cAAc,OAAO;AAC3B,kBAAI,gBAAgB,OAAO;AAC1B,sBAAM,KAAK,cAAc,IAAI,OAAO,IAAI;AAAA,cACzC,OAAO;AACN,sBAAM,KAAK,cAAc,IAAI,aAAa,IAAI;AAAA,cAC/C;AAAA,YACD;AAAA,UACD;AACA,cAAI,cAAc,cAAc;AAC/B,kBAAM,QAAQ,MAAM;AACpB,iBAAK;AAAA,cACJ,cAAc,KAAK,yCAAyC,OAAO,aAAa,MAAM;AAAA,cACtF;AAAA,YACD;AACA,gBAAI,UAAU,CAAC;AACf,gBAAI,OAAO,gBAAgB,sBAAsB;AAEhD,oBAAM,gBAAgB,KAAK,cAAc,KAAK,CAACC,SAAQA,KAAI,OAAO,OAAO,EAAE;AAC3E,kBAAI,eAAe;AAElB,qBAAI,mBAAc,UAAd,mBAAqB,OAAO,GAAG,OAAO;AACzC,4BAAU;AAAA,oBACT,QAAQ;AAAA,sBACP;AAAA,wBACC,IAAI,cAAc,MAAM,OAAO,GAAG;AAAA,wBAClC,MAAM,cAAc,MAAM,OAAO,GAAG;AAAA,wBACpC,YAAY;AAAA,wBACZ,uBACC,cAAc,MAAM,OAAO,GAAG;AAAA,wBAC/B,OAAO,cAAc,MAAM,OAAO,GAAG;AAAA,sBACtC;AAAA,oBACD;AAAA,kBACD;AAAA,gBAED,OAAO;AACN,4BAAU;AAAA,oBACT,QAAQ;AAAA,sBACP;AAAA,wBACC,YAAY;AAAA,sBACb;AAAA,oBACD;AAAA,kBACD;AAAA,gBAED;AAAA,cACD;AAAA,YACD,OAAO;AACN,wBAAU;AAAA,gBACT,QAAQ;AAAA,kBACP;AAAA,oBACC,YAAY;AAAA,kBACb;AAAA,gBACD;AAAA,cACD;AAAA,YACD;AACA,kBAAM,SAAS,MAAM,KAAK,mBAAmB,QAAoB,OAA0B;AAC3F,gBAAI,QAAQ;AACX,oBAAM,aAAa,OAAO,OAAO,GAAG;AACpC,kBAAI,eAAe,OAAO;AACzB,sBAAM,KAAK,cAAc,IAAI,OAAO,IAAI;AAAA,cACzC,OAAO;AACN,sBAAM,KAAK,cAAc,IAAI,YAAsB,IAAI;AAAA,cACxD;AAAA,YACD;AAAA,UACD;AACA,cAAI,cAAc,eAAe;AAChC,iBAAK;AAAA,cACJ,cAAc,KAAK,0CAA0C,OAAO,aAAa,MAAM;AAAA,cACvF;AAAA,YACD;AACA,kBAAM,QAAQ,MAAM;AAEpB,gBAAI,QAAQ;AAEZ,gBAAI,OAAO;AACV,sBAAQ,MAAU;AAElB,sBAAQ,KAAK,MAAM,KAAK;AAExB,kBAAI,QAAQ;AAAK,wBAAQ;AACzB,kBAAI,QAAQ;AAAK,wBAAQ;AAAA,YAC1B,OAAO;AACN,sBAAQ;AAAA,YACT;AAEA,kBAAM,UAAU;AAAA,cACf,QAAQ;AAAA,gBACP;AAAA,kBACC,aAAa;AAAA,gBACd;AAAA,cACD;AAAA,YACD;AACA,kBAAM,SAAsC,MAAM,KAAK;AAAA,cACtD;AAAA,cACA;AAAA,YACD;AAEA,gBAAI,QAAQ;AACX,oBAAM,cAAc,OAAO,OAAO,GAAG;AACrC,kBAAI,gBAAgB,OAAO;AAC1B,sBAAM,KAAK,cAAc,IAAI,OAAO,IAAI;AAAA,cACzC,OAAO;AACN,oBAAI,aAAa;AAEhB,sBAAI,iBAAiB,MAAU;AAE/B,mCAAiB,KAAK,MAAM,cAAc;AAC1C,wBAAM,KAAK,cAAc,IAAI,gBAA0B,IAAI;AAAA,gBAC5D;AAAA,cACD;AAAA,YACD;AAAA,UACD;AACA,cAAI,cAAc,OAAO;AACxB,iBAAK;AAAA,cACJ,cAAc,KAAK,kCAAkC,OAAO,aAAa,MAAM;AAAA,cAC/E;AAAA,YACD;AACA,kBAAM,QAAQ,MAAM;AACpB,kBAAM,UAAU;AAAA,cACf,QAAQ;AAAA,gBACP;AAAA,kBACC,KAAK;AAAA,gBACN;AAAA,cACD;AAAA,YACD;AACA,kBAAM,SAAwC,MAAM,KAAK;AAAA,cACxD;AAAA,cACA;AAAA,YACD;AACA,gBAAI,QAAQ;AACX,oBAAM,MAAM,OAAO,OAAO,GAAG;AAC7B,kBAAI,QAAQ,OAAO;AAClB,sBAAM,KAAK,cAAc,IAAI,OAAO,IAAI;AAAA,cACzC,OAAO;AACN,sBAAM,KAAK,cAAc,IAAI,KAAe,IAAI;AAAA,cACjD;AAAA,YACD;AAAA,UACD;AACA,cAAI,cAAc,cAAc;AAC/B,iBAAK;AAAA,cACJ,cAAc,KAAK,yCAAyC,OAAO,aAAa,MAAM;AAAA,cACtF;AAAA,YACD;AACA,kBAAM,QAAQ,MAAM;AACpB,kBAAM,UAAU;AAAA,cACf,QAAQ;AAAA,gBACP;AAAA,kBACC,YAAY;AAAA,gBACb;AAAA,cACD;AAAA,YACD;AACA,kBAAM,SAAwC,MAAM,KAAK;AAAA,cACxD;AAAA,cACA;AAAA,YACD;AACA,gBAAI,QAAQ;AACX,oBAAM,aAAa,OAAO,OAAO,GAAG;AACpC,kBAAI,eAAe,OAAO;AACzB,sBAAM,KAAK,cAAc,IAAI,OAAO,IAAI;AAAA,cACzC,OAAO;AACN,sBAAM,KAAK,cAAc,IAAI,YAAsB,IAAI;AAAA,cACxD;AAAA,YACD;AAAA,UACD;AACA,cAAI,cAAc,OAAO;AACxB,iBAAK;AAAA,cACJ,cAAc,KAAK,kCAAkC,OAAO,aAAa,MAAM;AAAA,cAC/E;AAAA,YACD;AACA,kBAAM,QAAQ,MAAM;AAEpB,gBAAI,MAAM;AACV,gBAAI,MAAM;AACV,gBAAI,MAAM;AAEV,kBAAM,UAAM,uBAAS,KAAK;AAC1B,kBAAM,KAAK,MAAM,IAAI,EAAE;AACvB,kBAAM,KAAK,MAAM,IAAI,EAAE;AACvB,kBAAM,KAAK,MAAM,IAAI,EAAE;AAEvB,kBAAM,UAAU;AAAA,cACf,QAAQ;AAAA,gBACP;AAAA,kBACC;AAAA,kBACA,YAAY;AAAA,kBACZ,YAAY;AAAA,gBACb;AAAA,cACD;AAAA,YACD;AAEA,kBAAM,SAAwC,MAAM,KAAK;AAAA,cACxD;AAAA,cACA;AAAA,YACD;AACA,gBAAI,QAAQ;AACX,oBAAM,UAAM;AAAA,gBACX,OAAO,OAAO,GAAG;AAAA,gBACjB,OAAO,OAAO,GAAG;AAAA,gBACjB,OAAO,OAAO,GAAG;AAAA,cAClB;AACA,kBAAI,QAAQ,OAAO;AAClB,sBAAM,KAAK,cAAc,IAAI,OAAO,IAAI;AAAA,cACzC,OAAO;AACN,sBAAM,KAAK,cAAc,IAAI,KAAK,IAAI;AAAA,cACvC;AAAA,YACD;AAAA,UACD;AACA,cAAI,cAAc,OAAO;AACxB,iBAAK;AAAA,cACJ,cAAc,KAAK,kCAAkC,OAAO,aAAa,MAAM;AAAA,cAC/E;AAAA,YACD;AACA,kBAAM,QAAQ,MAAM;AAEpB,gBAAI,MAAM;AACV,gBAAI,MAAM;AACV,gBAAI,MAAM;AAEV,kBAAM,MAAM,MAAM,MAAM,GAAG;AAC3B,kBAAM,UAAM,uBAAS,SAAS,IAAI,EAAE,GAAG,SAAS,IAAI,EAAE,GAAG,SAAS,IAAI,EAAE,CAAC;AACzE,kBAAM,KAAK,MAAM,IAAI,EAAE;AACvB,kBAAM,KAAK,MAAM,IAAI,EAAE;AACvB,kBAAM,KAAK,MAAM,IAAI,EAAE;AAEvB,kBAAM,UAAU;AAAA,cACf,QAAQ;AAAA,gBACP;AAAA,kBACC;AAAA,kBACA,YAAY;AAAA,kBACZ,YAAY;AAAA,gBACb;AAAA,cACD;AAAA,YACD;AACA,kBAAM,SAAwC,MAAM,KAAK;AAAA,cACxD;AAAA,cACA;AAAA,YACD;AACA,gBAAI,QAAQ;AACX,oBAAMC,WAAM;AAAA,gBACX,OAAO,OAAO,GAAG;AAAA,gBACjB,OAAO,OAAO,GAAG;AAAA,gBACjB,OAAO,OAAO,GAAG;AAAA,cAClB;AACA,kBAAIA,SAAQ,OAAO;AAClB,sBAAM,KAAK,cAAc,IAAI,OAAO,IAAI;AAAA,cACzC,OAAO;AACN,sBAAM,KAAK,cAAc,IAAIA,MAAK,IAAI;AAAA,cACvC;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD,OAAO;AACN;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAc,UAAU,KAAsC;AAC7D,QAAI,OAAO,QAAQ,YAAY,IAAI,SAAS;AAC3C,UAAI,IAAI,YAAY,eAAe;AAClC,cAAM,SAAS,IAAI;AACnB,cAAM,OAAiB;AAAA,UACtB,IAAI,OAAO;AAAA,UACX,MAAM;AAAA,QACP;AACA,cAAM,SAAS,MAAM,KAAK,YAAY,IAAI;AAE1C,YAAI,OAAO,YAAY,WAAW;AACjC,eAAK,OAAO,IAAI,MAAM,IAAI,SAAS,QAAQ,IAAI,QAAQ;AAAA,QACxD,OAAO;AACN,eAAK,OAAO,IAAI,MAAM,IAAI,SAAS,QAAQ,IAAI,QAAQ;AAAA,QACxD;AAAA,MACD;AACA,UAAI,IAAI,YAAY,kBAAkB;AACrC,cAAM,SAAS,IAAI;AACnB,cAAM,QAAQ,KAAK,QAAQ,UAAU,CAAC,MAAG;AAp5C7C;AAo5CgD,0BAAE,SAAF,mBAAQ,kBAAiB,OAAO;AAAA,SAAE;AAC9E,YAAI,QAAQ,IAAI;AACf,eAAK,QAAQ,OAAO,OAAO,CAAC;AAC5B,eAAK,SAAS,cAAc,KAAK,oCAAoC,OAAO,MAAM,OAAO;AACzF,gBAAM,KAAK,eAAe,GAAG,KAAK,aAAa,OAAO,MAAM,EAAE,WAAW,KAAK,CAAC;AAC/E,gBAAM,KAAK,QAAQ;AACnB,eAAK,OAAO,IAAI,MAAM,IAAI,SAAS,EAAE,SAAS,UAAU,GAAG,IAAI,QAAQ;AAAA,QACxE;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAAA,EAKA,MAAc,SAAS,UAAqC;AAn6C7D;AAo6CE,QAAI;AACH,WAAK,SAAS,cAAc,KAAK,qCAAqC,OAAO;AAE7E,UAAI,KAAK;AAAc,aAAK,aAAa,KAAK,YAAY;AAC1D,UAAI,KAAK;AAAqB,aAAK,aAAa,KAAK,mBAAmB;AACxE,WAAK,SAAS,mBAAmB,OAAO,IAAI;AAC5C,iBAAW,cAAc,KAAK,SAAS;AACtC,aAAK,SAAS,IAAG,UAAK,QAAQ,YAAY,SAAzB,mBAA+B,0BAA0B,OAAO,IAAI;AAAA,MACtF;AAEA,eAAS;AAAA,IACV,SAAS,GAAP;AACD,eAAS;AAAA,IACV;AAAA,EACD;AACD;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAE5B,SAAO,UAAU,CAAC,YAAuD,IAAI,eAAe,OAAO;AACpG,OAAO;AAEN,GAAC,MAAM,IAAI,eAAe,GAAG;AAC9B;",
  "names": ["sourceMapSupport", "_a", "_b", "axios", "obj", "rgb"]
}
