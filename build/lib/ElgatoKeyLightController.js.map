{
  "version": 3,
  "sources": ["../../src/lib/ElgatoKeyLightController.ts"],
  "sourcesContent": ["import { Bonjour } from 'bonjour-service';\nimport { EventEmitter } from 'events';\nimport { KeyLight, KeyLightInfo, KeyLightOptions, KeyLightSettings } from '../types/KeyLight';\nimport axios from 'axios';\nimport 'source-map-support/register';\nimport { LightStrip, LightStripOptions } from '../types/LightStrip';\n\nexport class ElgatoKeyLightController extends EventEmitter {\n\tpublic keyLights: Array<KeyLight>;\n\tpublic lightStrips: Array<LightStrip>;\n\n\t/**\n\t * Creates an instance of ElgatoKeyLightController.\n\t *\n\t * @memberof ElgatoKeyLightController\n\t */\n\tconstructor() {\n\t\tsuper();\n\n\t\tconst bonjour = new Bonjour();\n\t\tthis.keyLights = [];\n\t\tthis.lightStrips = [];\n\n\t\t// Continually monitors for a new Key Light to be added\n\t\tbonjour.find({ type: 'elg' }, async (service: any) => {\n\t\t\tif (service.txt.md.startsWith('Elgato Key Light')) {\n\t\t\t\tawait this.addKeyLight({\n\t\t\t\t\tip: service['referer'].address,\n\t\t\t\t\tport: service.port,\n\t\t\t\t\tname: service.name,\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (service.txt.md.startsWith('Elgato Light Strip')) {\n\t\t\t\tawait this.addKeyLight({\n\t\t\t\t\tip: service['referer'].address,\n\t\t\t\t\tport: service.port,\n\t\t\t\t\tname: service.name,\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Adds a Key Light instance to our current array\n\t *\n\t * @private\n\t * @param {KeyLight} keyLight\n\t * @memberof ElgatoKeyLightController\n\t */\n\tprivate async addKeyLight(keyLight: KeyLight): Promise<void> {\n\t\ttry {\n\t\t\t//Grab our Key Light's settings, info, and current options\n\t\t\tconst settingsCall = await axios.get(`http://${keyLight.ip}:${keyLight.port}/elgato/lights/settings`);\n\t\t\tkeyLight.settings = settingsCall.data;\n\n\t\t\tconst infoCall = await axios.get(`http://${keyLight.ip}:${keyLight.port}/elgato/accessory-info`);\n\t\t\tkeyLight.info = infoCall.data;\n\n\t\t\tconst optionsCall = await axios.get(`http://${keyLight.ip}:${keyLight.port}/elgato/lights`);\n\t\t\tkeyLight.light = optionsCall.data;\n\n\t\t\tif (keyLight.info?.productName.startsWith('Elgato Key Light Mini')) {\n\t\t\t\tconst batteryCall = await axios.get(`http://${keyLight.ip}:${keyLight.port}/elgato/battery-info`);\n\t\t\t\tkeyLight.battery = batteryCall.data;\n\t\t\t}\n\n\t\t\t//Push the Key Light to our array and emit the event\n\t\t\tthis.keyLights.push(keyLight);\n\t\t\tthis.emit('newKeyLight', keyLight);\n\t\t\t// this.emit('updateKeyLights');\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t}\n\n\t/**\n\t * Updates a Key Light to the given options\n\t *\n\t * @param {KeyLight} device\n\t * @returns {Promise<KeyLight | undefined>}\n\t * @memberof ElgatoKeyLightController\n\t */\n\tpublic async requestData(device: KeyLight): Promise<KeyLight> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\t//Grab our Keey Light's settings, info, and current options\n\t\t\t\tconst settingsCall = await axios.get(`http://${device.ip}:${device.port}/elgato/lights/settings`);\n\t\t\t\tdevice.settings = settingsCall.data;\n\n\t\t\t\tconst infoCall = await axios.get(`http://${device.ip}:${device.port}/elgato/accessory-info`);\n\t\t\t\tdevice.info = infoCall.data;\n\n\t\t\t\tconst optionsCall = await axios.get(`http://${device.ip}:${device.port}/elgato/lights`);\n\t\t\t\tdevice.light = optionsCall.data;\n\n\t\t\t\treturn resolve(device);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Updates a Key Light to the given options\n\t *\n\t * @param {KeyLight} device\n\t * @param {KeyLightOptions} options\n\t * @returns {Promise<void>}\n\t * @memberof ElgatoKeyLightController\n\t */\n\tpublic async updateLightOptions(device: KeyLight, options: KeyLightOptions): Promise<unknown> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst result = await axios.put(`http://${device.ip}:${device.port}/elgato/lights`, options);\n\t\t\t\treturn resolve(result);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t\treturn reject(e);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Updates a Key Light to the given options\n\t *\n\t * @param {KeyLight} device\n\t * @param {KeyLightOptions} options\n\t * @returns {Promise<void>}\n\t * @memberof ElgatoKeyLightController\n\t */\n\tpublic async updateLightSettings(device: KeyLight, options: KeyLightSettings): Promise<void> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tawait axios.put(`http://${device.ip}:${device.port}/elgato/lights/settings`, options);\n\t\t\t\treturn resolve();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t\treturn reject(e);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Updates a Key Light to the given options\n\t *\n\t * @param {KeyLight} device\n\t * @param {KeyLightOptions} options\n\t * @returns {Promise<void>}\n\t * @memberof ElgatoKeyLightController\n\t */\n\tpublic async updateLightInfo(device: KeyLight, options: KeyLightInfo): Promise<void> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tawait axios.put(`http://${device.ip}:${device.port}/elgato/accessory-info`, options);\n\t\t\t\treturn resolve();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(e);\n\t\t\t\treturn reject(e);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Updates all lights to the given options\n\t *\n\t * @param {KeyLightOptions} options\n\t * @returns {Promise<void>}\n\t * @memberof ElgatoKeyLightController\n\t */\n\tpublic async updateAllLights(options: KeyLightOptions): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfor (let x = 0; x < this.keyLights.length; x++) {\n\t\t\t\tthis.updateLightOptions(this.keyLights[x], options).catch((e) => {\n\t\t\t\t\treturn reject(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn resolve();\n\t\t});\n\t}\n\t/**\n\t * Updates all lights to the given options\n\t *\n\t * @param {LightStripOptions} options\n\t * @returns {Promise<void>}\n\t * @memberof ElgatoKeyLightController\n\t */\n\tpublic async updateAllStrips(options: LightStripOptions): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfor (let x = 0; x < this.keyLights.length; x++) {\n\t\t\t\tthis.updateLightOptions(this.keyLights[x], options).catch((e) => {\n\t\t\t\t\treturn reject(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn resolve();\n\t\t});\n\t}\n\n\tpublic async identify(device: KeyLight): Promise<void> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tawait axios.post(`http://${device.ip}:${device.port ? device.port : 9123}/elgato/identify`);\n\t\t\t\treturn resolve();\n\t\t\t} catch (e) {\n\t\t\t\treturn reject(e);\n\t\t\t}\n\t\t});\n\t}\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
